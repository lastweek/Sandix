#
#	Tutorial for writing Makefile in Sandix
#


######################################################
#
#
#	PART ZERO: OBJECTS, FILES
#
#
######################################################

##
#
# 1) Top-Makefile and Arch-Makefile
#
#    Kernel Image Component:
#
#	boot-y		-	Architecture Setup Part(e.g. Real-Mode in x86)
#	head-y		-	Kernel Image Header(Normally, head.S)
#	init-y		-	Kernel Init Part(init/*)
#	core-y		-	Kernel Built-in Part(e.g. kernel/ mm/)
#	libs-y		-	Kernel Library
#	net-y		-	Kernel Network Sub-system
#	drivers-y	-	Kernel Various Drivers
#
# 2) In each Makefile
#
#    Compiled/Generated/Linked variables:
#
#	obj-y	 - Kernel Built-in Object
#			Compile each one.
#			Link them into built-in.o automatically.
#
#	lib-y	 - Kernel Library Object
#			Compile each one.
#			Archive into lib.a automatically.
#
#	setup-y	 - Kernel Setup Part Object(e.g. Real-Mode code in x86)
#			Compile each one
#			Architecture Makefile will link them together.
#
#	extra-y	 - Object to be compiled but NOT linked into kernel.
#			Compile each one
#			No object is linked(e.g. vmSandix.ld.S).
#
#	always	 - Object used by HOST program, always rebuild.
#			Compile each one
#			Linking depends on Makefile.host
#
#	targets	 - Used to include *.d and *.cmd files.
#			List all compiled/generated/linked objects.
#		(Note that: every [target:] built via $(if_changed_xx)
#		 should add itself to $(targets). Since Kbuild.include
#		 will use $(arg-check) to decide if the saved command
#		 is out-dated. Further more, those command files are
#		 saved by Makefile.build, which using $(targets))


######################################################
#
#
#	PART ONE: USING CONVENTION
#
#
######################################################


##
# Host programs
#
# Suppose you have print.c
#
# 1) hostprogs-y := print
#
# For more information about how to add host programs
# please consult Makefile.host for details!

##
# Built-in
#
# Suppose you have foo.c or foo.S,
# 
# 1) obj-y := foo.o
#	Compile foo.c OR foo.s to foo.o
# 2) obj-y := foo.s
#	Compile foo.c OR foo.s to foo.s
# 3) obj-y := foo.i
#	Preprocess foo.c to foo.i

##
# Library
#
# Suppose you have bar.c or bar.S,
#
# 1) lib-y := bar.o
#	Compile bar.c OR bar.S to bar.o
#

##
# Caveat
# If you do this:
#	obj-y += bob.o
#	lib-y += bob.o
# Then Kbuild will take bob.o into Built-in
# For now, in Sandix, the $(lib-y) is useless.
# I add files to $(lib-y) just to remind me that
# it is supposed to be a library!
###

##
# Clean files
#
# Suppose you have additional files generated
# in building process other than general object
# files listed in obj-y, for example, foo.tab.c
# then you can use:
# 
# 1) clean-files := foo.tab.c
#	Kbuild will remove this file.

##
# Objdump
#
# Suppose you want to view assembly code of some ELF
# object files, then you can use:
#
# 1) objdump-y := ada.o
#	Kbuild will generate ada.objdump in your directory.


######################################################
#
#
#	PART TWO: FLAGS
#
#
######################################################

subdir-ccflags-y
subdir-asflags-y
AFLAGS_foo.o
CFLAGS_foo.o
CFLAGS_REMOVE_foo.o

asflags-y
ccflags-y
