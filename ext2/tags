!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ATTRIB_NORET	ext2_fs.h	404;"	d
DINDIRECT_BLOCK	truncate.c	207;"	d	file:
DIRECT_BLOCK	truncate.c	68;"	d	file:
E2BIG	errno.h	8;"	d
EACCES	errno.h	14;"	d
EADDRINUSE	errno.h	101;"	d
EADDRNOTAVAIL	errno.h	102;"	d
EADV	errno.h	71;"	d
EAFNOSUPPORT	errno.h	100;"	d
EAGAIN	errno.h	12;"	d
EALREADY	errno.h	117;"	d
EBADE	errno.h	53;"	d
EBADF	errno.h	10;"	d
EBADFD	errno.h	80;"	d
EBADMSG	errno.h	77;"	d
EBADR	errno.h	54;"	d
EBADRQC	errno.h	57;"	d
EBADSLT	errno.h	58;"	d
EBFONT	errno.h	62;"	d
EBUSY	errno.h	17;"	d
ECHILD	errno.h	11;"	d
ECHRNG	errno.h	45;"	d
ECOMM	errno.h	73;"	d
ECONNABORTED	errno.h	106;"	d
ECONNREFUSED	errno.h	114;"	d
ECONNRESET	errno.h	107;"	d
EDEADLK	errno.h	36;"	d
EDEADLOCK	errno.h	60;"	d
EDESTADDRREQ	errno.h	92;"	d
EDOM	errno.h	34;"	d
EDOTDOT	errno.h	76;"	d
EDQUOT	errno.h	125;"	d
EEXIST	errno.h	18;"	d
EFAULT	errno.h	15;"	d
EFBIG	errno.h	28;"	d
EHOSTDOWN	errno.h	115;"	d
EHOSTUNREACH	errno.h	116;"	d
EIDRM	errno.h	44;"	d
EILSEQ	errno.h	87;"	d
EINPROGRESS	errno.h	118;"	d
EINTR	errno.h	5;"	d
EINVAL	errno.h	23;"	d
EIO	errno.h	6;"	d
EISCONN	errno.h	109;"	d
EISDIR	errno.h	22;"	d
EISNAM	errno.h	123;"	d
EL2HLT	errno.h	52;"	d
EL2NSYNC	errno.h	46;"	d
EL3HLT	errno.h	47;"	d
EL3RST	errno.h	48;"	d
ELIBACC	errno.h	82;"	d
ELIBBAD	errno.h	83;"	d
ELIBEXEC	errno.h	86;"	d
ELIBMAX	errno.h	85;"	d
ELIBSCN	errno.h	84;"	d
ELNRNG	errno.h	49;"	d
ELOOP	errno.h	41;"	d
EMFILE	errno.h	25;"	d
EMLINK	errno.h	32;"	d
EMSGSIZE	errno.h	93;"	d
EMULTIHOP	errno.h	75;"	d
ENAMETOOLONG	errno.h	37;"	d
ENAVAIL	errno.h	122;"	d
ENETDOWN	errno.h	103;"	d
ENETRESET	errno.h	105;"	d
ENETUNREACH	errno.h	104;"	d
ENFILE	errno.h	24;"	d
ENOANO	errno.h	56;"	d
ENOBUFS	errno.h	108;"	d
ENOCSI	errno.h	51;"	d
ENODATA	errno.h	64;"	d
ENODEV	errno.h	20;"	d
ENOENT	errno.h	3;"	d
ENOEXEC	errno.h	9;"	d
ENOLCK	errno.h	38;"	d
ENOLINK	errno.h	70;"	d
ENOMEM	errno.h	13;"	d
ENOMSG	errno.h	43;"	d
ENONET	errno.h	67;"	d
ENOPKG	errno.h	68;"	d
ENOPROTOOPT	errno.h	95;"	d
ENOSPC	errno.h	29;"	d
ENOSR	errno.h	66;"	d
ENOSTR	errno.h	63;"	d
ENOSYS	errno.h	39;"	d
ENOTBLK	errno.h	16;"	d
ENOTCONN	errno.h	110;"	d
ENOTDIR	errno.h	21;"	d
ENOTEMPTY	errno.h	40;"	d
ENOTNAM	errno.h	121;"	d
ENOTSOCK	errno.h	91;"	d
ENOTTY	errno.h	26;"	d
ENOTUNIQ	errno.h	79;"	d
ENXIO	errno.h	7;"	d
EOPNOTSUPP	errno.h	98;"	d
EOVERFLOW	errno.h	78;"	d
EPERM	errno.h	2;"	d
EPFNOSUPPORT	errno.h	99;"	d
EPIPE	errno.h	33;"	d
EPROTO	errno.h	74;"	d
EPROTONOSUPPORT	errno.h	96;"	d
EPROTOTYPE	errno.h	94;"	d
ERANGE	errno.h	35;"	d
EREMCHG	errno.h	81;"	d
EREMOTE	errno.h	69;"	d
EREMOTEIO	errno.h	124;"	d
ERESTART	errno.h	88;"	d
EROFS	errno.h	31;"	d
ESHUTDOWN	errno.h	111;"	d
ESOCKTNOSUPPORT	errno.h	97;"	d
ESPIPE	errno.h	30;"	d
ESRCH	errno.h	4;"	d
ESRMNT	errno.h	72;"	d
ESTALE	errno.h	119;"	d
ESTRPIPE	errno.h	89;"	d
ETIME	errno.h	65;"	d
ETIMEDOUT	errno.h	113;"	d
ETOOMANYREFS	errno.h	112;"	d
ETXTBSY	errno.h	27;"	d
EUCLEAN	errno.h	120;"	d
EUNATCH	errno.h	50;"	d
EUSERS	errno.h	90;"	d
EWOULDBLOCK	errno.h	42;"	d
EXDEV	errno.h	19;"	d
EXFULL	errno.h	55;"	d
EXT2FS_DATE	ext2_fs.h	21;"	d
EXT2FS_VERSION	ext2_fs.h	22;"	d
EXT2_ACLE_PER_BLOCK	ext2_fs.h	58;"	d
EXT2_ACL_DATA_INO	ext2_fs.h	30;"	d
EXT2_ACL_IDX_INO	ext2_fs.h	29;"	d
EXT2_ADDR_PER_BLOCK	ext2_fs.h	59;"	d
EXT2_ADDR_PER_BLOCK_BITS	ext2_fs.h	66;"	d
EXT2_APPEND_FL	ext2_fs.h	160;"	d
EXT2_BAD_INO	ext2_fs.h	27;"	d
EXT2_BLOCKS_PER_GROUP	ext2_fs.h	133;"	d
EXT2_BLOCKS_PER_GROUP	ext2_fs.h	138;"	d
EXT2_BLOCK_SIZE	ext2_fs.h	54;"	d
EXT2_BLOCK_SIZE	ext2_fs.h	56;"	d
EXT2_BLOCK_SIZE_BITS	ext2_fs.h	61;"	d
EXT2_BLOCK_SIZE_BITS	ext2_fs.h	63;"	d
EXT2_BOOT_LOADER_INO	ext2_fs.h	31;"	d
EXT2_COMPR_FL	ext2_fs.h	157;"	d
EXT2_CURRENT_REV	ext2_fs.h	354;"	d
EXT2_DEF_RESGID	ext2_fs.h	363;"	d
EXT2_DEF_RESUID	ext2_fs.h	362;"	d
EXT2_DESC_PER_BLOCK	ext2_fs.h	134;"	d
EXT2_DESC_PER_BLOCK	ext2_fs.h	139;"	d
EXT2_DESC_PER_BLOCK_BITS	ext2_fs.h	136;"	d
EXT2_DFL_CHECKINTERVAL	ext2_fs.h	278;"	d
EXT2_DFL_MAX_MNT_COUNT	ext2_fs.h	277;"	d
EXT2_DIND_BLOCK	ext2_fs.h	148;"	d
EXT2_DIR_PAD	ext2_fs.h	382;"	d
EXT2_DIR_REC_LEN	ext2_fs.h	384;"	d
EXT2_DIR_ROUND	ext2_fs.h	383;"	d
EXT2_DYNAMIC_REV	ext2_fs.h	352;"	d
EXT2_ERRORS_CONTINUE	ext2_fs.h	283;"	d
EXT2_ERRORS_DEFAULT	ext2_fs.h	286;"	d
EXT2_ERRORS_PANIC	ext2_fs.h	285;"	d
EXT2_ERRORS_RO	ext2_fs.h	284;"	d
EXT2_ERROR_FS	ext2_fs.h	254;"	d
EXT2_FEATURE_COMPAT_SUPP	ext2_fs.h	390;"	d
EXT2_FEATURE_INCOMPAT_SUPP	ext2_fs.h	391;"	d
EXT2_FEATURE_RO_COMPAT_SUPP	ext2_fs.h	392;"	d
EXT2_FIRST_INO	ext2_fs.h	68;"	d
EXT2_FIRST_INO	ext2_fs.h	73;"	d
EXT2_FRAGS_PER_BLOCK	ext2_fs.h	86;"	d
EXT2_FRAGS_PER_BLOCK	ext2_fs.h	89;"	d
EXT2_FRAG_SIZE	ext2_fs.h	85;"	d
EXT2_FRAG_SIZE	ext2_fs.h	88;"	d
EXT2_GOOD_OLD_FIRST_INO	ext2_fs.h	35;"	d
EXT2_GOOD_OLD_INODE_SIZE	ext2_fs.h	357;"	d
EXT2_GOOD_OLD_REV	ext2_fs.h	351;"	d
EXT2_IMMUTABLE_FL	ext2_fs.h	159;"	d
EXT2_IND_BLOCK	ext2_fs.h	147;"	d
EXT2_INODES_PER_GROUP	ext2_fs.h	135;"	d
EXT2_INODES_PER_GROUP	ext2_fs.h	140;"	d
EXT2_INODE_SIZE	ext2_fs.h	67;"	d
EXT2_INODE_SIZE	ext2_fs.h	70;"	d
EXT2_IOC_GETFLAGS	ext2_fs.h	167;"	d
EXT2_IOC_GETVERSION	ext2_fs.h	169;"	d
EXT2_IOC_SETFLAGS	ext2_fs.h	168;"	d
EXT2_IOC_SETVERSION	ext2_fs.h	170;"	d
EXT2_LINK_MAX	ext2_fs.h	45;"	d
EXT2_MAX_BLOCK_SIZE	ext2_fs.h	51;"	d
EXT2_MAX_FRAG_SIZE	ext2_fs.h	82;"	d
EXT2_MAX_GROUP_LOADED	ext2_fs_sb.h	16;"	d
EXT2_MAX_SUPP_REV	ext2_fs.h	355;"	d
EXT2_MIN_BLOCK_LOG_SIZE	ext2_fs.h	52;"	d
EXT2_MIN_BLOCK_SIZE	ext2_fs.h	50;"	d
EXT2_MIN_FRAG_LOG_SIZE	ext2_fs.h	83;"	d
EXT2_MIN_FRAG_SIZE	ext2_fs.h	81;"	d
EXT2_MOUNT_CHECK	ext2_fs.h	261;"	d
EXT2_MOUNT_CHECK_NORMAL	ext2_fs.h	259;"	d
EXT2_MOUNT_CHECK_STRICT	ext2_fs.h	260;"	d
EXT2_MOUNT_DEBUG	ext2_fs.h	264;"	d
EXT2_MOUNT_ERRORS_CONT	ext2_fs.h	265;"	d
EXT2_MOUNT_ERRORS_PANIC	ext2_fs.h	267;"	d
EXT2_MOUNT_ERRORS_RO	ext2_fs.h	266;"	d
EXT2_MOUNT_GRPID	ext2_fs.h	263;"	d
EXT2_MOUNT_MINIX_DF	ext2_fs.h	268;"	d
EXT2_NAME_LEN	ext2_fs.h	368;"	d
EXT2_NDIR_BLOCKS	ext2_fs.h	146;"	d
EXT2_NODUMP_FL	ext2_fs.h	161;"	d
EXT2_N_BLOCKS	ext2_fs.h	150;"	d
EXT2_OS_FREEBSD	ext2_fs.h	345;"	d
EXT2_OS_HURD	ext2_fs.h	343;"	d
EXT2_OS_LINUX	ext2_fs.h	342;"	d
EXT2_OS_LITES	ext2_fs.h	346;"	d
EXT2_OS_MASIX	ext2_fs.h	344;"	d
EXT2_PREALLOCATE	ext2_fs.h	16;"	d
EXT2_RESERVED_FL	ext2_fs.h	162;"	d
EXT2_ROOT_INO	ext2_fs.h	28;"	d
EXT2_SECRM_FL	ext2_fs.h	155;"	d
EXT2_SUPER_MAGIC	ext2_fs.h	40;"	d
EXT2_SYNC_FL	ext2_fs.h	158;"	d
EXT2_TIND_BLOCK	ext2_fs.h	149;"	d
EXT2_UNDEL_DIR_INO	ext2_fs.h	32;"	d
EXT2_UNRM_FL	ext2_fs.h	156;"	d
EXT2_VALID_FS	ext2_fs.h	253;"	d
INDIRECT_BLOCK	truncate.c	121;"	d	file:
MAX	file.c	34;"	d	file:
MIN	file.c	33;"	d	file:
M_OBJS	Makefile	/^M_OBJS   := $(O_TARGET)$/;"	m
NAMEI_RA_BLOCKS	namei.c	31;"	d	file:
NAMEI_RA_CHUNKS	namei.c	30;"	d	file:
NAMEI_RA_INDEX	namei.c	33;"	d	file:
NAMEI_RA_SIZE	namei.c	32;"	d	file:
NBUF	file.c	31;"	d	file:
NORET_AND	ext2_fs.h	405;"	d
NORET_TYPE	ext2_fs.h	403;"	d
O_OBJS	Makefile	/^O_OBJS   := acl.o balloc.o bitmap.o dir.o file.o fsync.o ialloc.o inode.o \\$/;"	m
O_TARGET	Makefile	/^O_TARGET := ext2.o$/;"	m
PARENT_INO	namei.c	922;"	d	file:
PARENT_NAME	namei.c	926;"	d	file:
TINDIRECT_BLOCK	truncate.c	266;"	d	file:
_I386_TYPES_H	types.h	2;"	d
__s16	types.h	/^typedef __signed__ short __s16;$/;"	t
__s32	types.h	/^typedef __signed__ int __s32;$/;"	t
__s64	types.h	/^typedef __signed__ long long __s64;$/;"	t
__s8	types.h	/^typedef __signed__ char __s8;$/;"	t
__u16	types.h	/^typedef unsigned short __u16;$/;"	t
__u32	types.h	/^typedef unsigned int __u32;$/;"	t
__u64	types.h	/^typedef unsigned long long __u64;$/;"	t
__u8	types.h	/^typedef unsigned char __u8;$/;"	t
acle_next	ext2_fs.h	/^	__u32	acle_next;	\/* Pointer on next entry for the *\/$/;"	m	struct:ext2_acl_entry
acle_pad1	ext2_fs.h	/^	__u16	acle_pad1;$/;"	m	struct:ext2_acl_entry
acle_perms	ext2_fs.h	/^	__u16	acle_perms;	\/* Access permissions *\/$/;"	m	struct:ext2_acl_entry
acle_size	ext2_fs.h	/^	__u32	acle_size;$/;"	m	struct:ext2_acl_entry
acle_tag	ext2_fs.h	/^	__u16	acle_tag;	\/* User or group identity *\/$/;"	m	struct:ext2_acl_entry
acle_type	ext2_fs.h	/^	__u16	acle_type;	\/* Type of entry *\/$/;"	m	struct:ext2_acl_entry
aclh_acle_count	ext2_fs.h	/^	__u32	aclh_acle_count;$/;"	m	struct:ext2_acl_header
aclh_file_count	ext2_fs.h	/^	__u32	aclh_file_count;$/;"	m	struct:ext2_acl_header
aclh_first_acle	ext2_fs.h	/^	__u32	aclh_first_acle;$/;"	m	struct:ext2_acl_header
aclh_size	ext2_fs.h	/^	__u32	aclh_size;$/;"	m	struct:ext2_acl_header
addr_per_block	fsync.c	28;"	d	file:
bg_block_bitmap	ext2_fs.h	/^	__u32	bg_block_bitmap;		\/* Blocks bitmap block *\/$/;"	m	struct:ext2_group_desc
bg_free_blocks_count	ext2_fs.h	/^	__u16	bg_free_blocks_count;	\/* Free blocks count *\/$/;"	m	struct:ext2_group_desc
bg_free_inodes_count	ext2_fs.h	/^	__u16	bg_free_inodes_count;	\/* Free inodes count *\/$/;"	m	struct:ext2_group_desc
bg_inode_bitmap	ext2_fs.h	/^	__u32	bg_inode_bitmap;		\/* Inodes bitmap block *\/$/;"	m	struct:ext2_group_desc
bg_inode_table	ext2_fs.h	/^	__u32	bg_inode_table;		\/* Inodes table block *\/$/;"	m	struct:ext2_group_desc
bg_pad	ext2_fs.h	/^	__u16	bg_pad;$/;"	m	struct:ext2_group_desc
bg_reserved	ext2_fs.h	/^	__u32	bg_reserved[3];$/;"	m	struct:ext2_group_desc
bg_used_dirs_count	ext2_fs.h	/^	__u16	bg_used_dirs_count;	\/* Directories count *\/$/;"	m	struct:ext2_group_desc
block_bmap	inode.c	/^static inline int block_bmap (struct buffer_head * bh, int nr)$/;"	f	file:
block_getblk	inode.c	/^static struct buffer_head * block_getblk (struct inode * inode,$/;"	f	file:
block_getcluster	inode.c	/^static int block_getcluster (struct inode * inode, struct buffer_head * bh,$/;"	f	file:
block_in_use	balloc.c	/^static inline int block_in_use (unsigned long block,$/;"	f	file:
blocksize	fsync.c	27;"	d	file:
cleanup_module	super.c	/^void cleanup_module(void)$/;"	f
clear_opt	ext2_fs.h	270;"	d
do_ext2_rename	namei.c	/^static int do_ext2_rename (struct inode * old_dir, const char * old_name,$/;"	f	file:
empty_dir	namei.c	/^static int empty_dir (struct inode * inode)$/;"	f	file:
error_buf	super.c	/^static char error_buf[1024];$/;"	v	file:
ext2_acl_entry	ext2_fs.h	/^struct ext2_acl_entry	\/* Access Control List Entry *\/$/;"	s
ext2_acl_header	ext2_fs.h	/^struct ext2_acl_header	\/* Header of Access Control Lists *\/$/;"	s
ext2_add_entry	namei.c	/^static struct buffer_head * ext2_add_entry (struct inode * dir,$/;"	f	file:
ext2_alloc_block	inode.c	/^static int ext2_alloc_block (struct inode * inode, unsigned long goal, int * err)$/;"	f	file:
ext2_bmap	inode.c	/^int ext2_bmap (struct inode * inode, int block)$/;"	f
ext2_bread	inode.c	/^struct buffer_head * ext2_bread (struct inode * inode, int block, $/;"	f
ext2_check_blocks_bitmap	balloc.c	/^void ext2_check_blocks_bitmap (struct super_block * sb)$/;"	f
ext2_check_descriptors	super.c	/^static int ext2_check_descriptors (struct super_block * sb)$/;"	f	file:
ext2_check_dir_entry	dir.c	/^int ext2_check_dir_entry (const char * function, struct inode * dir,$/;"	f
ext2_check_inodes_bitmap	ialloc.c	/^void ext2_check_inodes_bitmap (struct super_block * sb)$/;"	f
ext2_commit_super	super.c	/^static void ext2_commit_super (struct super_block * sb,$/;"	f	file:
ext2_count_free	bitmap.c	/^unsigned long ext2_count_free (struct buffer_head * map, unsigned int numchars)$/;"	f
ext2_count_free_blocks	balloc.c	/^unsigned long ext2_count_free_blocks (struct super_block * sb)$/;"	f
ext2_count_free_inodes	ialloc.c	/^unsigned long ext2_count_free_inodes (struct super_block * sb)$/;"	f
ext2_create	namei.c	/^int ext2_create (struct inode * dir,const char * name, int len, int mode,$/;"	f
ext2_delete_entry	namei.c	/^static int ext2_delete_entry (struct ext2_dir_entry * dir,$/;"	f	file:
ext2_dir_entry	ext2_fs.h	/^struct ext2_dir_entry {$/;"	s
ext2_dir_inode_operations	dir.c	/^struct inode_operations ext2_dir_inode_operations = {$/;"	v	typeref:struct:inode_operations
ext2_dir_operations	dir.c	/^static struct file_operations ext2_dir_operations = {$/;"	v	typeref:struct:file_operations	file:
ext2_dir_read	dir.c	/^static long ext2_dir_read (struct inode * inode, struct file * filp,$/;"	f	file:
ext2_discard_prealloc	inode.c	/^void ext2_discard_prealloc (struct inode * inode)$/;"	f
ext2_error	super.c	/^void ext2_error (struct super_block * sb, const char * function,$/;"	f
ext2_file_inode_operations	file.c	/^struct inode_operations ext2_file_inode_operations = {$/;"	v	typeref:struct:inode_operations
ext2_file_operations	file.c	/^static struct file_operations ext2_file_operations = {$/;"	v	typeref:struct:file_operations	file:
ext2_file_write	file.c	/^static long ext2_file_write (struct inode * inode, struct file * filp,$/;"	f	file:
ext2_find_entry	namei.c	/^static struct buffer_head * ext2_find_entry (struct inode * dir,$/;"	f	file:
ext2_follow_link	symlink.c	/^static int ext2_follow_link(struct inode * dir, struct inode * inode,$/;"	f	file:
ext2_free_blocks	balloc.c	/^void ext2_free_blocks (const struct inode * inode, unsigned long block,$/;"	f
ext2_free_inode	ialloc.c	/^void ext2_free_inode (struct inode * inode)$/;"	f
ext2_fs_type	super.c	/^static struct file_system_type ext2_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
ext2_getblk	inode.c	/^struct buffer_head * ext2_getblk (struct inode * inode, long block,$/;"	f
ext2_getcluster	inode.c	/^int ext2_getcluster (struct inode * inode, long block)$/;"	f
ext2_group_desc	ext2_fs.h	/^struct ext2_group_desc$/;"	s
ext2_inode	ext2_fs.h	/^struct ext2_inode {$/;"	s
ext2_inode_info	ext2_fs_i.h	/^struct ext2_inode_info {$/;"	s
ext2_ioctl	ioctl.c	/^int ext2_ioctl (struct inode * inode, struct file * filp, unsigned int cmd,$/;"	f
ext2_link	namei.c	/^int ext2_link (struct inode * oldinode, struct inode * dir,$/;"	f
ext2_lookup	namei.c	/^int ext2_lookup (struct inode * dir, const char * name, int len,$/;"	f
ext2_match	namei.c	/^static int ext2_match (int len, const char * const name,$/;"	f	file:
ext2_mkdir	namei.c	/^int ext2_mkdir (struct inode * dir, const char * name, int len, int mode)$/;"	f
ext2_mknod	namei.c	/^int ext2_mknod (struct inode * dir, const char * name, int len, int mode,$/;"	f
ext2_new_block	balloc.c	/^int ext2_new_block (const struct inode * inode, unsigned long goal,$/;"	f
ext2_new_inode	ialloc.c	/^struct inode * ext2_new_inode (const struct inode * dir, int mode, int * err)$/;"	f
ext2_panic	super.c	/^NORET_TYPE void ext2_panic (struct super_block * sb, const char * function,$/;"	f
ext2_permission	acl.c	/^int ext2_permission (struct inode * inode, int mask)$/;"	f
ext2_put_inode	inode.c	/^void ext2_put_inode (struct inode * inode)$/;"	f
ext2_put_super	super.c	/^void ext2_put_super (struct super_block * sb)$/;"	f
ext2_read_inode	inode.c	/^void ext2_read_inode (struct inode * inode)$/;"	f
ext2_read_super	super.c	/^struct super_block * ext2_read_super (struct super_block * sb, void * data,$/;"	f
ext2_readdir	dir.c	/^static int ext2_readdir (struct inode * inode, struct file * filp,$/;"	f	file:
ext2_readlink	symlink.c	/^static int ext2_readlink (struct inode * inode, char * buffer, int buflen)$/;"	f	file:
ext2_release_file	file.c	/^static void ext2_release_file (struct inode * inode, struct file * filp)$/;"	f	file:
ext2_remount	super.c	/^int ext2_remount (struct super_block * sb, int * flags, char * data)$/;"	f
ext2_rename	namei.c	/^int ext2_rename (struct inode * old_dir, const char * old_name, int old_len,$/;"	f
ext2_rmdir	namei.c	/^int ext2_rmdir (struct inode * dir, const char * name, int len)$/;"	f
ext2_sb_info	ext2_fs_sb.h	/^struct ext2_sb_info {$/;"	s
ext2_setup_super	super.c	/^static void ext2_setup_super (struct super_block * sb,$/;"	f	file:
ext2_sops	super.c	/^static struct super_operations ext2_sops = { $/;"	v	typeref:struct:super_operations	file:
ext2_statfs	super.c	/^void ext2_statfs (struct super_block * sb, struct statfs * buf, int bufsiz)$/;"	f
ext2_super_block	ext2_fs.h	/^struct ext2_super_block {$/;"	s
ext2_symlink	namei.c	/^int ext2_symlink (struct inode * dir, const char * name, int len,$/;"	f
ext2_symlink_inode_operations	symlink.c	/^struct inode_operations ext2_symlink_inode_operations = {$/;"	v	typeref:struct:inode_operations
ext2_sync_file	fsync.c	/^int ext2_sync_file (struct inode * inode, struct file * file)$/;"	f
ext2_sync_inode	inode.c	/^int ext2_sync_inode (struct inode *inode)$/;"	f
ext2_truncate	truncate.c	/^void ext2_truncate (struct inode * inode)$/;"	f
ext2_unlink	namei.c	/^int ext2_unlink (struct inode * dir, const char * name, int len)$/;"	f
ext2_update_inode	inode.c	/^static int ext2_update_inode(struct inode * inode, int do_sync)$/;"	f	file:
ext2_warning	super.c	/^void ext2_warning (struct super_block * sb, const char * function,$/;"	f
ext2_write_inode	inode.c	/^void ext2_write_inode (struct inode * inode)$/;"	f
ext2_write_super	super.c	/^void ext2_write_super (struct super_block * sb)$/;"	f
get_group_desc	balloc.c	/^static struct ext2_group_desc * get_group_desc (struct super_block * sb,$/;"	f	file:
get_group_desc	ialloc.c	/^static struct ext2_group_desc * get_group_desc (struct super_block * sb,$/;"	f	file:
h_i_author	ext2_fs.h	/^			__u32	h_i_author;$/;"	m	struct:ext2_inode::__anon5::__anon7
h_i_frag	ext2_fs.h	/^			__u8	h_i_frag;	\/* Fragment number *\/$/;"	m	struct:ext2_inode::__anon5::__anon7
h_i_fsize	ext2_fs.h	/^			__u8	h_i_fsize;	\/* Fragment size *\/$/;"	m	struct:ext2_inode::__anon5::__anon7
h_i_gid_high	ext2_fs.h	/^			__u16	h_i_gid_high;$/;"	m	struct:ext2_inode::__anon5::__anon7
h_i_mode_high	ext2_fs.h	/^			__u16	h_i_mode_high;$/;"	m	struct:ext2_inode::__anon5::__anon7
h_i_translator	ext2_fs.h	/^			__u32  h_i_translator;$/;"	m	struct:ext2_inode::__anon1::__anon3
h_i_uid_high	ext2_fs.h	/^			__u16	h_i_uid_high;$/;"	m	struct:ext2_inode::__anon5::__anon7
hurd1	ext2_fs.h	/^		} hurd1;$/;"	m	union:ext2_inode::__anon1	typeref:struct:ext2_inode::__anon1::__anon3
hurd2	ext2_fs.h	/^		} hurd2;$/;"	m	union:ext2_inode::__anon5	typeref:struct:ext2_inode::__anon5::__anon7
i_atime	ext2_fs.h	/^	__u32	i_atime;	\/* Access time *\/$/;"	m	struct:ext2_inode
i_author	ext2_fs.h	240;"	d
i_block	ext2_fs.h	/^	__u32	i_block[EXT2_N_BLOCKS];\/* Pointers to blocks *\/$/;"	m	struct:ext2_inode
i_block_group	ext2_fs_i.h	/^	__u32	i_block_group;$/;"	m	struct:ext2_inode_info
i_blocks	ext2_fs.h	/^	__u32	i_blocks;	\/* Blocks count *\/$/;"	m	struct:ext2_inode
i_ctime	ext2_fs.h	/^	__u32	i_ctime;	\/* Creation time *\/$/;"	m	struct:ext2_inode
i_data	ext2_fs_i.h	/^	__u32	i_data[15];$/;"	m	struct:ext2_inode_info
i_dir_acl	ext2_fs.h	/^	__u32	i_dir_acl;	\/* Directory ACL *\/$/;"	m	struct:ext2_inode
i_dir_acl	ext2_fs_i.h	/^	__u32	i_dir_acl;$/;"	m	struct:ext2_inode_info
i_dtime	ext2_fs.h	/^	__u32	i_dtime;	\/* Deletion Time *\/$/;"	m	struct:ext2_inode
i_dtime	ext2_fs_i.h	/^	__u32	i_dtime;$/;"	m	struct:ext2_inode_info
i_faddr	ext2_fs.h	/^	__u32	i_faddr;	\/* Fragment address *\/$/;"	m	struct:ext2_inode
i_faddr	ext2_fs_i.h	/^	__u32	i_faddr;$/;"	m	struct:ext2_inode_info
i_file_acl	ext2_fs.h	/^	__u32	i_file_acl;	\/* File ACL *\/$/;"	m	struct:ext2_inode
i_file_acl	ext2_fs_i.h	/^	__u32	i_file_acl;$/;"	m	struct:ext2_inode_info
i_flags	ext2_fs.h	/^	__u32	i_flags;	\/* File flags *\/$/;"	m	struct:ext2_inode
i_flags	ext2_fs_i.h	/^	__u32	i_flags;$/;"	m	struct:ext2_inode_info
i_frag	ext2_fs.h	229;"	d
i_frag	ext2_fs.h	236;"	d
i_frag	ext2_fs.h	245;"	d
i_frag_no	ext2_fs_i.h	/^	__u8	i_frag_no;$/;"	m	struct:ext2_inode_info
i_frag_size	ext2_fs_i.h	/^	__u8	i_frag_size;$/;"	m	struct:ext2_inode_info
i_fsize	ext2_fs.h	230;"	d
i_fsize	ext2_fs.h	237;"	d
i_fsize	ext2_fs.h	246;"	d
i_gid	ext2_fs.h	/^	__u16	i_gid;		\/* Group Id *\/$/;"	m	struct:ext2_inode
i_gid_high	ext2_fs.h	239;"	d
i_links_count	ext2_fs.h	/^	__u16	i_links_count;	\/* Links count *\/$/;"	m	struct:ext2_inode
i_mode	ext2_fs.h	/^	__u16	i_mode;		\/* File mode *\/$/;"	m	struct:ext2_inode
i_mtime	ext2_fs.h	/^	__u32	i_mtime;	\/* Modification time *\/$/;"	m	struct:ext2_inode
i_new_inode	ext2_fs_i.h	/^	int	i_new_inode:1;	\/* Is a freshly allocated inode *\/$/;"	m	struct:ext2_inode_info
i_next_alloc_block	ext2_fs_i.h	/^	__u32	i_next_alloc_block;$/;"	m	struct:ext2_inode_info
i_next_alloc_goal	ext2_fs_i.h	/^	__u32	i_next_alloc_goal;$/;"	m	struct:ext2_inode_info
i_osync	ext2_fs_i.h	/^	__u16	i_osync;$/;"	m	struct:ext2_inode_info
i_pad1	ext2_fs.h	/^			__u16	i_pad1;$/;"	m	struct:ext2_inode::__anon5::__anon6
i_prealloc_block	ext2_fs_i.h	/^	__u32	i_prealloc_block;$/;"	m	struct:ext2_inode_info
i_prealloc_count	ext2_fs_i.h	/^	__u32	i_prealloc_count;$/;"	m	struct:ext2_inode_info
i_reserved1	ext2_fs.h	228;"	d
i_reserved1	ext2_fs.h	244;"	d
i_reserved2	ext2_fs.h	231;"	d
i_reserved2	ext2_fs.h	247;"	d
i_size	ext2_fs.h	/^	__u32	i_size;		\/* Size in bytes *\/$/;"	m	struct:ext2_inode
i_translator	ext2_fs.h	235;"	d
i_uid	ext2_fs.h	/^	__u16	i_uid;		\/* Owner Uid *\/$/;"	m	struct:ext2_inode
i_uid_high	ext2_fs.h	238;"	d
i_version	ext2_fs.h	/^	__u32	i_version;	\/* File version (for NFS) *\/$/;"	m	struct:ext2_inode
i_version	ext2_fs_i.h	/^	__u32	i_version;$/;"	m	struct:ext2_inode_info
in_range	balloc.c	36;"	d	file:
inc_inode_version	ialloc.c	/^static void inc_inode_version (struct inode * inode,$/;"	f	file:
init_ext2_fs	super.c	/^int init_ext2_fs(void)$/;"	f
init_module	super.c	/^int init_module(void)$/;"	f
inode	ext2_fs.h	/^	__u32	inode;			\/* Inode number *\/$/;"	m	struct:ext2_dir_entry
inode_bmap	inode.c	47;"	d	file:
inode_getblk	inode.c	/^static struct buffer_head * inode_getblk (struct inode * inode, int nr,$/;"	f	file:
l_i_frag	ext2_fs.h	/^			__u8	l_i_frag;	\/* Fragment number *\/$/;"	m	struct:ext2_inode::__anon5::__anon6
l_i_fsize	ext2_fs.h	/^			__u8	l_i_fsize;	\/* Fragment size *\/$/;"	m	struct:ext2_inode::__anon5::__anon6
l_i_reserved1	ext2_fs.h	/^			__u32  l_i_reserved1;$/;"	m	struct:ext2_inode::__anon1::__anon2
l_i_reserved2	ext2_fs.h	/^			__u32	l_i_reserved2[2];$/;"	m	struct:ext2_inode::__anon5::__anon6
linux1	ext2_fs.h	/^		} linux1;$/;"	m	union:ext2_inode::__anon1	typeref:struct:ext2_inode::__anon1::__anon2
linux2	ext2_fs.h	/^		} linux2;$/;"	m	union:ext2_inode::__anon5	typeref:struct:ext2_inode::__anon5::__anon6
load__block_bitmap	balloc.c	/^static int load__block_bitmap (struct super_block * sb,$/;"	f	file:
load_block_bitmap	balloc.c	/^static inline int load_block_bitmap (struct super_block * sb,$/;"	f	file:
load_inode_bitmap	ialloc.c	/^static int load_inode_bitmap (struct super_block * sb,$/;"	f	file:
log2	super.c	363;"	d	file:
m_i_frag	ext2_fs.h	/^			__u8	m_i_frag;	\/* Fragment number *\/$/;"	m	struct:ext2_inode::__anon5::__anon8
m_i_fsize	ext2_fs.h	/^			__u8	m_i_fsize;	\/* Fragment size *\/$/;"	m	struct:ext2_inode::__anon5::__anon8
m_i_reserved1	ext2_fs.h	/^			__u32  m_i_reserved1;$/;"	m	struct:ext2_inode::__anon1::__anon4
m_i_reserved2	ext2_fs.h	/^			__u32	m_i_reserved2[2];$/;"	m	struct:ext2_inode::__anon5::__anon8
m_pad1	ext2_fs.h	/^			__u16	m_pad1;$/;"	m	struct:ext2_inode::__anon5::__anon8
masix1	ext2_fs.h	/^		} masix1;$/;"	m	union:ext2_inode::__anon1	typeref:struct:ext2_inode::__anon1::__anon4
masix2	ext2_fs.h	/^		} masix2;$/;"	m	union:ext2_inode::__anon5	typeref:struct:ext2_inode::__anon5::__anon8
name	ext2_fs.h	/^	char	name[EXT2_NAME_LEN];	\/* File name *\/$/;"	m	struct:ext2_dir_entry
name_len	ext2_fs.h	/^	__u16	name_len;		\/* Name length *\/$/;"	m	struct:ext2_dir_entry
nibblemap	bitmap.c	/^static int nibblemap[] = {4, 3, 3, 2, 3, 2, 2, 1, 3, 2, 2, 1, 2, 1, 1, 0};$/;"	v	file:
osd1	ext2_fs.h	/^	} osd1;				\/* OS dependent 1 *\/$/;"	m	struct:ext2_inode	typeref:union:ext2_inode::__anon1
osd2	ext2_fs.h	/^	} osd2;				\/* OS dependent 2 *\/$/;"	m	struct:ext2_inode	typeref:union:ext2_inode::__anon5
parse_options	super.c	/^static int parse_options (char * options, unsigned long * sb_block,$/;"	f	file:
read_block_bitmap	balloc.c	/^static void read_block_bitmap (struct super_block * sb,$/;"	f	file:
read_inode_bitmap	ialloc.c	/^static void read_inode_bitmap (struct super_block * sb,$/;"	f	file:
rec_len	ext2_fs.h	/^	__u16	rec_len;		\/* Directory entry length *\/$/;"	m	struct:ext2_dir_entry
s16	types.h	/^typedef signed short s16;$/;"	t
s32	types.h	/^typedef signed int s32;$/;"	t
s64	types.h	/^typedef signed long long s64;$/;"	t
s8	types.h	/^typedef signed char s8;$/;"	t
s_addr_per_block_bits	ext2_fs_sb.h	/^	int s_addr_per_block_bits;$/;"	m	struct:ext2_sb_info
s_block_bitmap	ext2_fs_sb.h	/^	struct buffer_head * s_block_bitmap[EXT2_MAX_GROUP_LOADED];$/;"	m	struct:ext2_sb_info	typeref:struct:ext2_sb_info::buffer_head
s_block_bitmap_number	ext2_fs_sb.h	/^	unsigned long s_block_bitmap_number[EXT2_MAX_GROUP_LOADED];$/;"	m	struct:ext2_sb_info
s_block_group_nr	ext2_fs.h	/^	__u16	s_block_group_nr; 	\/* block group # of this superblock *\/$/;"	m	struct:ext2_super_block
s_blocks_count	ext2_fs.h	/^	__u32	s_blocks_count;		\/* Blocks count *\/$/;"	m	struct:ext2_super_block
s_blocks_per_group	ext2_fs.h	/^	__u32	s_blocks_per_group;	\/* # Blocks per group *\/$/;"	m	struct:ext2_super_block
s_blocks_per_group	ext2_fs_sb.h	/^	unsigned long s_blocks_per_group;\/* Number of blocks in a group *\/$/;"	m	struct:ext2_sb_info
s_checkinterval	ext2_fs.h	/^	__u32	s_checkinterval;	\/* max. time between checks *\/$/;"	m	struct:ext2_super_block
s_creator_os	ext2_fs.h	/^	__u32	s_creator_os;		\/* OS *\/$/;"	m	struct:ext2_super_block
s_db_per_group	ext2_fs_sb.h	/^	unsigned long s_db_per_group;	\/* Number of descriptor blocks per group *\/$/;"	m	struct:ext2_sb_info
s_def_resgid	ext2_fs.h	/^	__u16	s_def_resgid;		\/* Default gid for reserved blocks *\/$/;"	m	struct:ext2_super_block
s_def_resuid	ext2_fs.h	/^	__u16	s_def_resuid;		\/* Default uid for reserved blocks *\/$/;"	m	struct:ext2_super_block
s_desc_per_block	ext2_fs_sb.h	/^	unsigned long s_desc_per_block;	\/* Number of group descriptors per block *\/$/;"	m	struct:ext2_sb_info
s_desc_per_block_bits	ext2_fs_sb.h	/^	int s_desc_per_block_bits;$/;"	m	struct:ext2_sb_info
s_errors	ext2_fs.h	/^	__u16	s_errors;		\/* Behaviour when detecting errors *\/$/;"	m	struct:ext2_super_block
s_es	ext2_fs_sb.h	/^	struct ext2_super_block * s_es;	\/* Pointer to the super block in the buffer *\/$/;"	m	struct:ext2_sb_info	typeref:struct:ext2_sb_info::ext2_super_block
s_feature_compat	ext2_fs.h	/^	__u32	s_feature_compat; 	\/* compatible feature set *\/$/;"	m	struct:ext2_super_block
s_feature_incompat	ext2_fs.h	/^	__u32	s_feature_incompat; 	\/* incompatible feature set *\/$/;"	m	struct:ext2_super_block
s_feature_ro_compat	ext2_fs.h	/^	__u32	s_feature_ro_compat; 	\/* readonly-compatible feature set *\/$/;"	m	struct:ext2_super_block
s_first_data_block	ext2_fs.h	/^	__u32	s_first_data_block;	\/* First Data Block *\/$/;"	m	struct:ext2_super_block
s_first_ino	ext2_fs.h	/^	__u32	s_first_ino; 		\/* First non-reserved inode *\/$/;"	m	struct:ext2_super_block
s_first_ino	ext2_fs_sb.h	/^	int s_first_ino;$/;"	m	struct:ext2_sb_info
s_frag_size	ext2_fs_sb.h	/^	unsigned long s_frag_size;	\/* Size of a fragment in bytes *\/$/;"	m	struct:ext2_sb_info
s_frags_per_block	ext2_fs_sb.h	/^	unsigned long s_frags_per_block;\/* Number of fragments per block *\/$/;"	m	struct:ext2_sb_info
s_frags_per_group	ext2_fs.h	/^	__u32	s_frags_per_group;	\/* # Fragments per group *\/$/;"	m	struct:ext2_super_block
s_frags_per_group	ext2_fs_sb.h	/^	unsigned long s_frags_per_group;\/* Number of fragments in a group *\/$/;"	m	struct:ext2_sb_info
s_free_blocks_count	ext2_fs.h	/^	__u32	s_free_blocks_count;	\/* Free blocks count *\/$/;"	m	struct:ext2_super_block
s_free_inodes_count	ext2_fs.h	/^	__u32	s_free_inodes_count;	\/* Free inodes count *\/$/;"	m	struct:ext2_super_block
s_group_desc	ext2_fs_sb.h	/^	struct buffer_head ** s_group_desc;$/;"	m	struct:ext2_sb_info	typeref:struct:ext2_sb_info::buffer_head
s_groups_count	ext2_fs_sb.h	/^	unsigned long s_groups_count;	\/* Number of groups in the fs *\/$/;"	m	struct:ext2_sb_info
s_inode_bitmap	ext2_fs_sb.h	/^	struct buffer_head * s_inode_bitmap[EXT2_MAX_GROUP_LOADED];$/;"	m	struct:ext2_sb_info	typeref:struct:ext2_sb_info::buffer_head
s_inode_bitmap_number	ext2_fs_sb.h	/^	unsigned long s_inode_bitmap_number[EXT2_MAX_GROUP_LOADED];$/;"	m	struct:ext2_sb_info
s_inode_size	ext2_fs.h	/^	__u16   s_inode_size; 		\/* size of inode structure *\/$/;"	m	struct:ext2_super_block
s_inode_size	ext2_fs_sb.h	/^	int s_inode_size;$/;"	m	struct:ext2_sb_info
s_inodes_count	ext2_fs.h	/^	__u32	s_inodes_count;		\/* Inodes count *\/$/;"	m	struct:ext2_super_block
s_inodes_per_block	ext2_fs_sb.h	/^	unsigned long s_inodes_per_block;\/* Number of inodes per block *\/$/;"	m	struct:ext2_sb_info
s_inodes_per_group	ext2_fs.h	/^	__u32	s_inodes_per_group;	\/* # Inodes per group *\/$/;"	m	struct:ext2_super_block
s_inodes_per_group	ext2_fs_sb.h	/^	unsigned long s_inodes_per_group;\/* Number of inodes in a group *\/$/;"	m	struct:ext2_sb_info
s_itb_per_group	ext2_fs_sb.h	/^	unsigned long s_itb_per_group;	\/* Number of inode table blocks per group *\/$/;"	m	struct:ext2_sb_info
s_lastcheck	ext2_fs.h	/^	__u32	s_lastcheck;		\/* time of last check *\/$/;"	m	struct:ext2_super_block
s_loaded_block_bitmaps	ext2_fs_sb.h	/^	unsigned short s_loaded_block_bitmaps;$/;"	m	struct:ext2_sb_info
s_loaded_inode_bitmaps	ext2_fs_sb.h	/^	unsigned short s_loaded_inode_bitmaps;$/;"	m	struct:ext2_sb_info
s_log_block_size	ext2_fs.h	/^	__u32	s_log_block_size;	\/* Block size *\/$/;"	m	struct:ext2_super_block
s_log_frag_size	ext2_fs.h	/^	__s32	s_log_frag_size;	\/* Fragment size *\/$/;"	m	struct:ext2_super_block
s_magic	ext2_fs.h	/^	__u16	s_magic;		\/* Magic signature *\/$/;"	m	struct:ext2_super_block
s_max_mnt_count	ext2_fs.h	/^	__s16	s_max_mnt_count;	\/* Maximal mount count *\/$/;"	m	struct:ext2_super_block
s_minor_rev_level	ext2_fs.h	/^	__u16	s_minor_rev_level; 	\/* minor revision level *\/$/;"	m	struct:ext2_super_block
s_mnt_count	ext2_fs.h	/^	__u16	s_mnt_count;		\/* Mount count *\/$/;"	m	struct:ext2_super_block
s_mount_opt	ext2_fs_sb.h	/^	unsigned long  s_mount_opt;$/;"	m	struct:ext2_sb_info
s_mount_state	ext2_fs_sb.h	/^	unsigned short s_mount_state;$/;"	m	struct:ext2_sb_info
s_mtime	ext2_fs.h	/^	__u32	s_mtime;		\/* Mount time *\/$/;"	m	struct:ext2_super_block
s_pad	ext2_fs_sb.h	/^	unsigned short s_pad;$/;"	m	struct:ext2_sb_info
s_r_blocks_count	ext2_fs.h	/^	__u32	s_r_blocks_count;	\/* Reserved blocks count *\/$/;"	m	struct:ext2_super_block
s_rename_lock	ext2_fs_sb.h	/^	int s_rename_lock;$/;"	m	struct:ext2_sb_info
s_rename_wait	ext2_fs_sb.h	/^	struct wait_queue * s_rename_wait;$/;"	m	struct:ext2_sb_info	typeref:struct:ext2_sb_info::wait_queue
s_reserved	ext2_fs.h	/^	__u32	s_reserved[230];	\/* Padding to the end of the block *\/$/;"	m	struct:ext2_super_block
s_resgid	ext2_fs_sb.h	/^	unsigned short s_resgid;$/;"	m	struct:ext2_sb_info
s_resuid	ext2_fs_sb.h	/^	unsigned short s_resuid;$/;"	m	struct:ext2_sb_info
s_rev_level	ext2_fs.h	/^	__u32	s_rev_level;		\/* Revision level *\/$/;"	m	struct:ext2_super_block
s_sbh	ext2_fs_sb.h	/^	struct buffer_head * s_sbh;	\/* Buffer containing the super block *\/$/;"	m	struct:ext2_sb_info	typeref:struct:ext2_sb_info::buffer_head
s_state	ext2_fs.h	/^	__u16	s_state;		\/* File system state *\/$/;"	m	struct:ext2_super_block
s_wtime	ext2_fs.h	/^	__u32	s_wtime;		\/* Write time *\/$/;"	m	struct:ext2_super_block
set_opt	ext2_fs.h	271;"	d
subdir	namei.c	/^static int subdir (struct inode * new_inode, struct inode * old_inode)$/;"	f	file:
sync_block	fsync.c	/^static int sync_block (struct inode * inode, u32 * block, int wait)$/;"	f	file:
sync_dindirect	fsync.c	/^static int sync_dindirect (struct inode * inode, u32 * diblock, int wait)$/;"	f	file:
sync_direct	fsync.c	/^static int sync_direct (struct inode * inode, int wait)$/;"	f	file:
sync_iblock	fsync.c	/^static int sync_iblock (struct inode * inode, u32 * iblock, $/;"	f	file:
sync_indirect	fsync.c	/^static int sync_indirect (struct inode * inode, u32 * iblock, int wait)$/;"	f	file:
sync_tindirect	fsync.c	/^static int sync_tindirect (struct inode * inode, u32 * tiblock, int wait)$/;"	f	file:
test_opt	ext2_fs.h	272;"	d
trunc_dindirect	truncate.c	/^static int trunc_dindirect (struct inode * inode, int offset,$/;"	f	file:
trunc_direct	truncate.c	/^static int trunc_direct (struct inode * inode)$/;"	f	file:
trunc_indirect	truncate.c	/^static int trunc_indirect (struct inode * inode, int offset, u32 * p)$/;"	f	file:
trunc_tindirect	truncate.c	/^static int trunc_tindirect (struct inode * inode)$/;"	f	file:
u16	types.h	/^typedef unsigned short u16;$/;"	t
u32	types.h	/^typedef unsigned int u32;$/;"	t
u64	types.h	/^typedef unsigned long long u64;$/;"	t
u8	types.h	/^typedef unsigned char u8;$/;"	t
umode_t	types.h	/^typedef unsigned short umode_t;$/;"	t
