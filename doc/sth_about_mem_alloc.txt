2014/11/27

Today i am thinking about: why we need to use malloc() and free()?

Firstly, i test some ideas, the code is in 
[apue/general_test/mallocaddr_tst.c].

Obviously, we can use memory via pointer in heap without malloc(). But, malloc()
will fail when: if we have a pointer [char *tmp] point to a address in heap, then 
we use [memset(tmp, 'y', 32)] to change the value, at last we use malloc() to 
allocate mem in that address, it fails(something about checksum).

Why malloc() fails?
It's something about how Standard C library implement malloc() and free().

Why we need to use malloc() and free()?
Without this functions, you will have to manage the whole heap on you own.
It's impossible to programmer when there are too many pointer in code.

2014/11/30

I have to say...the words above turns to be wrong.
Today i read a book talking about heap. 

If a process want to use some newer and higner address in heap, 
the process have to use brk() or sbrk() or mmap() to apply memory from os.
We can use malloc() and free() to manage our heap, cause the C standard Library
has already applied a large number of mem from os, so we just apply memory from
C standard Library. When the Library run out of memory, he will apply mem from
os like he did before.

In other words, C standard Library is just like a manager, he controls the ship.
