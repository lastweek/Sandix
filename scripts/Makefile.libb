#
#	Makefile.lib
#	Variables and xFlags. ;)
#

# HANDLE OBJECTS IN SUBDIR
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
# o if we encounter foo/ in $(obj-y), replace it by foo/built-in.o
#   and add the directory to the list of dirs to descend into: $(subdir-y)
# o $(subdir-obj-y) is the list of objects in $(obj-y) which uses dir/ to
#   tell kbuild to descend
# o $(obj-dirs) is a list of directories that contain object files

subdir-y	 := $(patsubst %/, %, $(filter %/, $(obj-y)))
subdir-y	 := $(sort $(subdir-y))
obj-y		 := $(patsubst %/, %/built-in.o, $(obj-y))
obj-dirs	 := $(dir $(obj-y))
subdir-obj-y := $(filter %/built-in.o, $(obj-y))

# Add subdir path
subdir-y	 := $(addprefix $(obj)/, $(subdir-y))
obj-y		 := $(addprefix $(obj)/, $(obj-y))
obj-dirs	 := $(addprefix $(obj)/, $(obj-dirs))
subdir-obj-y := $(addprefix $(obj)/, $(subdir-obj-y))


# GENERAL FLAGS FOR COMPILING
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
# o $(KBUILD_xFLAGS) are inherited from top Makefile
# o $(basetarget) in scripts/Kbuild.include
# o If foo.o need some EXTRA flags, it will have $(CFLAGS_foo.o) in Makefile.
# o If foo.o DONT need some flags, it will have $(CFLAGS_REMOVE_foo.o) in Makefile
# o If the value of ‘$@’ is dir/foo.o then ‘$(@F)’ is foo.o.
#   ‘$(@F)’ is equivalent to ‘$(notdir $@)’.

orig_c_flags	= $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(CFLAGS_$(basetarget).o)

_c_flags		= $(filter-out $(CFLAGS_REMOVE_$(basetarget).o), $(orig_c_flags))
_a_flags		= $(KBUILD_CPPFLAGS) $(KBUILD_AFLAGS) $(AFLAGS_$(basetarget).o)
_cpp_flags		= $(KBUILD_CPPFLAGS) $(CPPFLAGS_$(@F))

c_flags		= -Wp,-MD,$(depfile) $(NOSTDINC_FLAGS) $(SANDIXINCLUDE) $(_c_flags) 
a_flags		= -Wp,-MD,$(depfile) $(NOSTDINC_FLAGS) $(SANDIXINCLUDE) $(_a_flags)
cpp_flags	= -Wp,-MD,$(depfile) $(NOSTDINC_FLAGS) $(SANDIXINCLUDE) $(_cpp_flags)
ld_flags	= $(LDFLAGS)


# Commands useful for building a boot image
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
#
#	Use as following:
#
#	target: source(s) FORCE
#		$(if_changed,ld/objcopy/gzip)
#
#	and add target to extra-y so that we know we have to
#	read in the saved command line

# Linking
# ---------------------------------------------------------------------------

quiet_cmd_ld = LD      $@
cmd_ld = $(LD) $(LDFLAGS) $(ldflags-y) $(LDFLAGS_$(@F)) \
	       $(filter-out FORCE,$^) -o $@

# Objcopy
# ---------------------------------------------------------------------------

quiet_cmd_objcopy = OBJCOPY $@
cmd_objcopy = $(OBJCOPY) $(OBJCOPYFLAGS) $(OBJCOPYFLAGS_$(@F)) $< $@
