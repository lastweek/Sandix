#ifndef _ASM_DESCRIPTOR_H_
#define _ASM_DESCRIPTOR_H_

/*
 * X86 segment decriptor definitions and manipulations.
 */

#include <asm/segment.h>

struct desc_struct {
	union {
		struct {
			unsigned int a;
			unsigned int b;
		};
		struct {
			unsigned short limit0;
			unsigned short base0;
			unsigned base1:8, type:4, s:1, dpl:2, p:1;
			unsigned limit1:4, avl:1, l:1, d:1, g:1, base2:8;
		};
	};
}__attribute__((packed));

struct desc_ptr {
	unsigned short size;
	unsigned long address;
} __attribute__((packed));

extern struct desc_struct idt_table[];
extern struct desc_struct gdt_table[];

#define GDT_ENTRY_INIT(flags, base, limit)						\
	{										\
		.a = ((limit) & 0xffff) | (((base) & 0xffff) << 16),			\
		.b = (((base) & 0xff0000) >> 16) | (((flags) & 0xf0ff) << 8) |		\
			((limit) & 0xf0000) | ((base) & 0xff000000),			\
	}

/*
 * IDT NOTE 1:
 *
 *	The processor check the DPL of the interrupt or trap gate
 *	only if the interrupt or exception is generated by INT X.
 *	The CPL must be less than or equal to the DPL of the gate.
 *
 *	For hardware-generated interrutps and processor-deteced
 *	exceptions, the processor ignores the DPL of the gates.
 *
 * IDT NOTE 2:
 *
 *	The only difference between trap and interrupt gates is the
 *	way the processor handles the IF flags in EFLAGS register.
 *
 *	Through a interrupt gate, the processor clears the IF flag
 *	to prevent other interrupts from interfering with the current
 *	interrupt handler. A subsequent IRET instruction restores
 *	the IF flag to its value in the saved contents of the EFLAGS
 *	register on the stack. (The IF flag does not affect the
 *	generation of exceptions or NMI interrupts).
 *
 *	Through a trap gate, it does not affect the IF flag.
 */

#define __GATE_INTR		0xe
#define __GATE_TRAP		0xf

#define	__DPL_KERNEL		0
#define __DPL_USER		3

static inline void __set_gate(int gate, int addr, int type, int dpl, int ss)
{
	struct desc_struct desc;
	
	desc.a = (ss << 16) | (addr & 0xffff);
	desc.b = (addr & 0xffff0000) | 0x8000 | (dpl << 13) | (type <<8);

	idt_table[gate] = desc;
}

#define set_trap_gate(GATE, ADDR) \
	__set_gate(GATE, ADDR, __GATE_TRAP, __DPL_KERNEL, __KERNEL_CS);

#define set_intr_gate(GATE, ADDR) \
	__set_gate(GATE, ADDR, __GATE_INTR, __DPL_KERNEL, __KERNEL_CS);

#define set_system_call_gate(GATE, ADDR) \
	__set_gate(GATE, ADDR, __GATE_TRAP, __DPL_USER, __KERNEL_CS);


#endif /* _ASM_DESCRIPTOR_H_*/
