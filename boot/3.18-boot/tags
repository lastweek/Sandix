!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A20_ENABLE_LOOPS	a20.c	128;"	d	file:
A20_TEST_ADDR	a20.c	52;"	d	file:
A20_TEST_LONG	a20.c	54;"	d	file:
A20_TEST_SHORT	a20.c	53;"	d	file:
A32	cpucheck.c	48;"	d	file:
ADAPTER_CGA	video.h	89;"	d
ADAPTER_EGA	video.h	90;"	d
ADAPTER_VGA	video.h	91;"	d
ARRAY_SIZE	boot.h	35;"	d
BASE_BAUD	early_serial_console.c	98;"	d	file:
BOOTSEG	header.S	/^BOOTSEG		= 0x07C0		\/* original address of boot-sector *\/$/;"	d
BOOT_BITOPS_H	bitops.h	16;"	d
BOOT_BOOT_H	boot.h	17;"	d
BOOT_BOOT_H	compressed/misc.h	23;"	d
BOOT_COMPRESSED_EBOOT_H	compressed/eboot.h	2;"	d
BOOT_COMPRESSED_MISC_H	compressed/misc.h	2;"	d
BOOT_CPUFLAGS_H	cpuflags.h	2;"	d
BOOT_ISDIGIT_H	ctype.h	3;"	d
BOOT_SERVICES	compressed/eboot.c	27;"	d	file:
BOOT_STRING_H	string.h	2;"	d
BOOT_VESA_H	vesa.h	14;"	d
BOOT_VIDEO_H	video.h	16;"	d
BUILD_BUG_ON	boot.h	33;"	d
CMD_RELOCS	compressed/Makefile	/^CMD_RELOCS = arch\/x86\/tools\/relocs$/;"	m
CONFIG_PARAVIRT	compressed/misc.h	9;"	d
DEFAULT_BAUD	early_serial_console.c	21;"	d	file:
DEFAULT_MAJOR_ROOT	tools/build.c	42;"	d	file:
DEFAULT_MINOR_ROOT	tools/build.c	43;"	d	file:
DEFAULT_ROOT_DEV	tools/build.c	44;"	d	file:
DEFAULT_SERIAL_PORT	early_serial_console.c	3;"	d	file:
DESC_TYPE_CODE_DATA	compressed/eboot.h	12;"	d
DLAB	early_serial_console.c	7;"	d	file:
DLH	early_serial_console.c	19;"	d	file:
DLL	early_serial_console.c	18;"	d	file:
DO_STORE	video.h	60;"	d
EBX_REG	cpuflags.c	68;"	d	file:
EBX_REG	cpuflags.c	70;"	d	file:
EFI_CONSOLE_OUT_DEVICE_GUID	compressed/eboot.h	14;"	d
FCR	early_serial_console.c	13;"	d	file:
FDARGS	Makefile	/^FDARGS =$/;"	m
FDINITRD	Makefile	/^FDINITRD =$/;"	m
GCOV_PROFILE	Makefile	/^GCOV_PROFILE := n$/;"	m
GCOV_PROFILE	compressed/Makefile	/^GCOV_PROFILE := n$/;"	m
GET_HEAP	boot.h	209;"	d
H	video.c	195;"	d	file:
HEAP	main.c	/^char *HEAP = _end;$/;"	v
I8254_CMD_READBACK	compressed/aslr.c	19;"	d	file:
I8254_PORT_CONTROL	compressed/aslr.c	17;"	d	file:
I8254_PORT_COUNTER0	compressed/aslr.c	18;"	d	file:
I8254_SELECT_COUNTER0	compressed/aslr.c	20;"	d	file:
I8254_STATUS_NOTREADY	compressed/aslr.c	21;"	d	file:
IER	early_serial_console.c	11;"	d	file:
IIR	early_serial_console.c	12;"	d	file:
INIT_SIZE	header.S	/^#define INIT_SIZE VO_INIT_SIZE$/;"	d
INIT_SIZE	header.S	/^#define INIT_SIZE ZO_INIT_SIZE$/;"	d
KBUILD_AFLAGS	Makefile	/^KBUILD_AFLAGS	:= $(KBUILD_CFLAGS) -D__ASSEMBLY__$/;"	m
KBUILD_AFLAGS	compressed/Makefile	/^KBUILD_AFLAGS  := $(KBUILD_CFLAGS) -D__ASSEMBLY__$/;"	m
KBUILD_CFLAGS	Makefile	/^KBUILD_CFLAGS	:= $(USERINCLUDE) $(REALMODE_CFLAGS) -D_SETUP$/;"	m
KBUILD_CFLAGS	compressed/Makefile	/^KBUILD_CFLAGS := -m$(BITS) -D__KERNEL__ $(LINUX_INCLUDE) -O2$/;"	m
LCR	early_serial_console.c	14;"	d	file:
LDFLAGS	compressed/Makefile	/^LDFLAGS := -m elf_$(UTS_MACHINE)$/;"	m
LDFLAGS_setup.elf	Makefile	/^LDFLAGS_setup.elf	:= -T$/;"	m
LDFLAGS_vmlinux	compressed/Makefile	/^LDFLAGS_vmlinux := -T$/;"	m
LEFT	printf.c	33;"	d	file:
LSR	compressed/misc.c	162;"	d	file:
LSR	early_serial_console.c	16;"	d	file:
LSR	tty.c	23;"	d	file:
MAX_8042_FF	a20.c	19;"	d	file:
MAX_8042_LOOPS	a20.c	18;"	d	file:
MCR	early_serial_console.c	15;"	d	file:
MEM_AVOID_MAX	compressed/aslr.c	112;"	d	file:
MSR	early_serial_console.c	17;"	d	file:
MTOOLSRC	Makefile	/^	MTOOLSRC=$(obj)\/mtools.conf mcopy $(obj)\/bzImage a:linux	; sync$/;"	m
MTOOLSRC	Makefile	/^	MTOOLSRC=$(obj)\/mtools.conf mcopy $(obj)\/bzImage v:linux	; sync$/;"	m
MTOOLSRC	Makefile	/^	MTOOLSRC=$(obj)\/mtools.conf mcopy $(obj)\/bzImage w:linux	; sync$/;"	m
MTOOLSRC	Makefile	/^	MTOOLSRC=$(obj)\/mtools.conf mformat v:			; sync$/;"	m
MTOOLSRC	Makefile	/^	MTOOLSRC=$(obj)\/mtools.conf mformat w:			; sync$/;"	m
OBJCOPYFLAGS_setup.bin	Makefile	/^OBJCOPYFLAGS_setup.bin	:= -O binary$/;"	m
OBJCOPYFLAGS_vmlinux.bin	Makefile	/^OBJCOPYFLAGS_vmlinux.bin := -O binary -R .note -R .comment -S$/;"	m
OBJCOPYFLAGS_vmlinux.bin	compressed/Makefile	/^OBJCOPYFLAGS_vmlinux.bin :=  -R .comment -S$/;"	m
PARSE_ZOFS	tools/build.c	297;"	d	file:
PECOFF_RELOC_RESERVE	tools/build.c	54;"	d	file:
PIXEL_BGR_RESERVED_8BIT_PER_COLOR	compressed/eboot.h	19;"	d
PIXEL_BIT_MASK	compressed/eboot.h	20;"	d
PIXEL_BLT_ONLY	compressed/eboot.h	21;"	d
PIXEL_FORMAT_MAX	compressed/eboot.h	22;"	d
PIXEL_RGB_RESERVED_8BIT_PER_COLOR	compressed/eboot.h	18;"	d
PLUS	printf.c	31;"	d	file:
POPF	cpuflags.c	40;"	d	file:
POPF	cpuflags.c	43;"	d	file:
PUSHF	cpuflags.c	39;"	d	file:
PUSHF	cpuflags.c	42;"	d	file:
RESET_HEAP	boot.h	199;"	d
ROOT_RDONLY	header.S	/^#define ROOT_RDONLY 1$/;"	d
RUN_SIZE	compressed/Makefile	/^RUN_SIZE = $(shell $(OBJDUMP) -h vmlinux | \\$/;"	m
RXR	early_serial_console.c	10;"	d	file:
SCAN	video.c	196;"	d	file:
SEG_GRANULARITY_4KB	compressed/eboot.h	10;"	d
SEG_OP_SIZE_32BIT	compressed/eboot.h	9;"	d
SEG_TYPE_CODE	compressed/eboot.h	6;"	d
SEG_TYPE_DATA	compressed/eboot.h	4;"	d
SEG_TYPE_EXEC_READ	compressed/eboot.h	7;"	d
SEG_TYPE_READ_WRITE	compressed/eboot.h	5;"	d
SEG_TYPE_TSS	compressed/eboot.h	8;"	d
SETUP_OBJS	Makefile	/^SETUP_OBJS = $(addprefix $(obj)\/,$(setup-y))$/;"	m
SETUP_SECT_MAX	tools/build.c	48;"	d	file:
SETUP_SECT_MIN	tools/build.c	47;"	d	file:
SIGN	printf.c	30;"	d	file:
SMALL	printf.c	34;"	d	file:
SMAP	memory.c	18;"	d	file:
SPACE	printf.c	32;"	d	file:
SPECIAL	printf.c	35;"	d	file:
STACK_SIZE	boot.h	19;"	d
STATIC	compressed/misc.c	99;"	d	file:
SVGA_MODE	Makefile	/^SVGA_MODE	:= -DSVGA_MODE=NORMAL_VGA$/;"	m
SVGA_MODE	header.S	/^#define SVGA_MODE ASK_VGA$/;"	d
SYSSEG	header.S	/^SYSSEG		= 0x1000		\/* historical load address >> 4 *\/$/;"	d
TOLOWER	string.c	78;"	d	file:
TXR	compressed/misc.c	161;"	d	file:
TXR	early_serial_console.c	9;"	d	file:
TXR	tty.c	22;"	d	file:
VESA_MAGIC	vesa.h	32;"	d
VIDEO_80x25	video.h	42;"	d
VIDEO_80x28	video.h	45;"	d
VIDEO_80x30	video.h	47;"	d
VIDEO_80x34	video.h	48;"	d
VIDEO_80x43	video.h	44;"	d
VIDEO_80x60	video.h	49;"	d
VIDEO_8POINT	video.h	43;"	d
VIDEO_CURRENT_MODE	video.h	46;"	d
VIDEO_FIRST_BIOS	video.h	32;"	d
VIDEO_FIRST_MENU	video.h	29;"	d
VIDEO_FIRST_RESOLUTION	video.h	54;"	d
VIDEO_FIRST_SPECIAL	video.h	41;"	d
VIDEO_FIRST_V7	video.h	38;"	d
VIDEO_FIRST_VESA	video.h	35;"	d
VIDEO_GFX_HACK	video.h	50;"	d
VIDEO_LAST_SPECIAL	video.h	51;"	d
VIDEO_RECALC	video.h	57;"	d
VO_INIT_SIZE	header.S	/^#define VO_INIT_SIZE	(VO__end - VO__text)$/;"	d
XMTRDY	compressed/misc.c	159;"	d	file:
XMTRDY	early_serial_console.c	5;"	d	file:
XMTRDY	tty.c	20;"	d	file:
ZEROPAD	printf.c	29;"	d	file:
ZO_INIT_SIZE	header.S	/^#define ZO_INIT_SIZE	(ZO__end - ZO_startup_32 + ZO_z_extract_offset)$/;"	d
_ASM_X86_DESC_H	compressed/misc.h	11;"	d
_LINUX_BITOPS_H	bitops.h	17;"	d
__cmdline_find_option	cmdline.c	/^int __cmdline_find_option(unsigned long cmdline_ptr, const char *option, char *buffer, int bufsize)$/;"	f
__cmdline_find_option_bool	cmdline.c	/^int __cmdline_find_option_bool(unsigned long cmdline_ptr, const char *option)$/;"	f
__do_div	printf.c	37;"	d	file:
__file_size32	compressed/eboot.c	/^__file_size32(void *__fh, efi_char16_t *filename_16,$/;"	f	file:
__file_size64	compressed/eboot.c	/^__file_size64(void *__fh, efi_char16_t *filename_16,$/;"	f	file:
__get_heap	boot.h	/^static inline char *__get_heap(size_t s, size_t a, size_t n)$/;"	f
__gop_query32	compressed/eboot.c	/^__gop_query32(struct efi_graphics_output_protocol_32 *gop32,$/;"	f	file:
__gop_query64	compressed/eboot.c	/^__gop_query64(struct efi_graphics_output_protocol_64 *gop64,$/;"	f	file:
__open_volume32	compressed/eboot.c	/^static inline efi_status_t __open_volume32(void *__image, void **__fh)$/;"	f	file:
__open_volume64	compressed/eboot.c	/^static inline efi_status_t __open_volume64(void *__image, void **__fh)$/;"	f	file:
__packed	compressed/eboot.h	/^} __packed;$/;"	v	typeref:struct:efi_config
__packed	compressed/eboot.h	/^} __packed;$/;"	v	typeref:struct:efi_graphics_output_mode_info
__packed	compressed/eboot.h	/^} __packed;$/;"	v	typeref:struct:efi_graphics_output_protocol_mode
__packed	compressed/eboot.h	/^} __packed;$/;"	v	typeref:struct:efi_graphics_output_protocol_mode_32
__packed	compressed/eboot.h	/^} __packed;$/;"	v	typeref:struct:efi_graphics_output_protocol_mode_64
__putstr	compressed/misc.c	/^void __putstr(const char *s)$/;"	f
__setup_efi_pci32	compressed/eboot.c	/^__setup_efi_pci32(efi_pci_io_protocol_32 *pci, struct pci_setup_rom **__rom)$/;"	f	file:
__setup_efi_pci64	compressed/eboot.c	/^__setup_efi_pci64(efi_pci_io_protocol_64 *pci, struct pci_setup_rom **__rom)$/;"	f	file:
__videocard	video.h	83;"	d
_bss	compressed/vmlinux.lds.S	/^		_bss = . ;$/;"	d
_data	compressed/vmlinux.lds.S	/^		_data = . ;$/;"	d
_dses	boot.h	/^			u32 _dses;$/;"	m	struct:biosregs::__anon1::__anon2
_ebss	compressed/vmlinux.lds.S	/^		_ebss = .;$/;"	d
_edata	compressed/vmlinux.lds.S	/^		_edata = . ;$/;"	d
_egot	compressed/vmlinux.lds.S	/^		_egot = .;$/;"	d
_ehead	compressed/vmlinux.lds.S	/^		_ehead = . ;$/;"	d
_end	compressed/vmlinux.lds.S	/^	_end = .;$/;"	d
_epgtable	compressed/vmlinux.lds.S	/^		_epgtable = . ;$/;"	d
_erodata	compressed/vmlinux.lds.S	/^		_erodata = . ;$/;"	d
_esp	boot.h	/^			u32 _esp;$/;"	m	struct:biosregs::__anon1::__anon2
_esp2	boot.h	/^			u8 _spl, _sph, _esp2, _esp3;$/;"	m	struct:biosregs::__anon1::__anon4
_esp3	boot.h	/^			u8 _spl, _sph, _esp2, _esp3;$/;"	m	struct:biosregs::__anon1::__anon4
_etext	compressed/vmlinux.lds.S	/^		_etext = . ;$/;"	d
_fsgs	boot.h	/^			u32 _fsgs;$/;"	m	struct:biosregs::__anon1::__anon2
_got	compressed/vmlinux.lds.S	/^		_got = .;$/;"	d
_head	compressed/vmlinux.lds.S	/^		_head = . ;$/;"	d
_hsp	boot.h	/^			u16 _sp, _hsp;$/;"	m	struct:biosregs::__anon1::__anon3
_pgtable	compressed/vmlinux.lds.S	/^		_pgtable = . ;$/;"	d
_rodata	compressed/vmlinux.lds.S	/^		_rodata = . ;$/;"	d
_sp	boot.h	/^			u16 _sp, _hsp;$/;"	m	struct:biosregs::__anon1::__anon3
_sph	boot.h	/^			u8 _spl, _sph, _esp2, _esp3;$/;"	m	struct:biosregs::__anon1::__anon4
_spl	boot.h	/^			u8 _spl, _sph, _esp2, _esp3;$/;"	m	struct:biosregs::__anon1::__anon4
_start	header.S	/^_start:$/;"	l
_text	compressed/vmlinux.lds.S	/^		_text = .; 	\/* Text *\/$/;"	d
a20_test	a20.c	/^static int a20_test(int loops)$/;"	f	file:
a20_test_long	a20.c	/^static int a20_test_long(void)$/;"	f	file:
a20_test_short	a20.c	/^static int a20_test_short(void)$/;"	f	file:
adapter	video-mode.c	/^int adapter;			\/* 0=CGA\/MDA\/HGC, 1=EGA, 2=VGA+ *\/$/;"	v
add_e820ext	compressed/eboot.c	/^static void add_e820ext(struct boot_params *params,$/;"	f	file:
addr_t	boot.h	/^typedef unsigned int addr_t;$/;"	t
addr_t	compressed/cmdline.c	/^typedef unsigned long addr_t;$/;"	t	file:
ah	boot.h	/^			u8 al, ah, eax2, eax3;$/;"	m	struct:biosregs::__anon1::__anon4
al	boot.h	/^			u8 al, ah, eax2, eax3;$/;"	m	struct:biosregs::__anon1::__anon4
alloc_e820ext	compressed/eboot.c	/^static efi_status_t alloc_e820ext(u32 nr_desc, struct setup_data **e820ext,$/;"	f	file:
allocate_pages	compressed/eboot.h	/^	u64 allocate_pages;$/;"	m	struct:efi_config
allocate_pool	compressed/eboot.h	/^	u64 allocate_pool;$/;"	m	struct:efi_config
asflags-y	Makefile	/^$(obj)\/bzImage: asflags-y  := $(SVGA_MODE)$/;"	m
atou	string.c	/^unsigned int atou(const char *s)$/;"	f
ax	boot.h	/^			u16 ax, hax;$/;"	m	struct:biosregs::__anon1::__anon3
bank_size	vesa.h	/^	u8 bank_size;		\/* 28 *\/$/;"	m	struct:vesa_mode_info
banks	vesa.h	/^	u8 banks;		\/* 26 *\/$/;"	m	struct:vesa_mode_info
bh	boot.h	/^			u8 bl, bh, ebx2, ebx3;$/;"	m	struct:biosregs::__anon1::__anon4
bios_probe	video-bios.c	/^static int bios_probe(void)$/;"	f	file:
bios_putchar	tty.c	/^static void __attribute__((section(".inittext"))) bios_putchar(int ch)$/;"	f	file:
bios_set_mode	video-bios.c	/^static int bios_set_mode(struct mode_info *mi)$/;"	f	file:
biosregs	boot.h	/^struct biosregs {$/;"	s
bl	boot.h	/^			u8 bl, bh, ebx2, ebx3;$/;"	m	struct:biosregs::__anon1::__anon4
blt	compressed/eboot.h	/^	u32 blt;$/;"	m	struct:efi_graphics_output_protocol_32
blt	compressed/eboot.h	/^	u32 blt;$/;"	m	struct:efi_uga_draw_protocol_32
blt	compressed/eboot.h	/^	u64 blt;$/;"	m	struct:efi_graphics_output_protocol_64
blt	compressed/eboot.h	/^	u64 blt;$/;"	m	struct:efi_uga_draw_protocol_64
blt	compressed/eboot.h	/^	unsigned long blt;$/;"	m	struct:efi_graphics_output_protocol
blt	compressed/eboot.h	/^	void *blt;$/;"	m	struct:efi_uga_draw_protocol
blue_mask	compressed/eboot.h	/^	u32 blue_mask;$/;"	m	struct:efi_pixel_bitmask
bmask	vesa.h	/^	u8 bmask;		\/* 35 *\/$/;"	m	struct:vesa_mode_info
boot_flag	header.S	/^boot_flag:	.word 0xAA55$/;"	l
boot_heap	compressed/head_32.S	/^boot_heap:$/;"	l
boot_heap	compressed/head_64.S	/^boot_heap:$/;"	l
boot_params	main.c	/^struct boot_params boot_params __attribute__((aligned(16)));$/;"	v	typeref:struct:boot_params
boot_stack	compressed/head_32.S	/^boot_stack:$/;"	l
boot_stack	compressed/head_64.S	/^boot_stack:$/;"	l
boot_stack_end	compressed/head_32.S	/^boot_stack_end:$/;"	l
boot_stack_end	compressed/head_64.S	/^boot_stack_end:$/;"	l
bootsect_kludge	header.S	/^bootsect_kludge:$/;"	l
bootsect_start	header.S	/^bootsect_start:$/;"	l
bp	boot.h	/^			u16 bp, hbp;$/;"	m	struct:biosregs::__anon1::__anon3
bph	boot.h	/^			u8 bpl, bph, ebp2, ebp3;$/;"	m	struct:biosregs::__anon1::__anon4
bpl	boot.h	/^			u8 bpl, bph, ebp2, ebp3;$/;"	m	struct:biosregs::__anon1::__anon4
bpos	vesa.h	/^	u8 bpos;		\/* 36 *\/$/;"	m	struct:vesa_mode_info
bpp	vesa.h	/^	u8 bpp;			\/* 25 *\/$/;"	m	struct:vesa_mode_info
bs_die	header.S	/^bs_die:$/;"	l
buf	tools/build.c	/^u8 buf[SETUP_SECT_MAX*512];$/;"	v
bugger_off_msg	header.S	/^bugger_off_msg:$/;"	l
build_str	compressed/aslr.c	/^static const char build_str[] = UTS_RELEASE " (" LINUX_COMPILE_BY "@"$/;"	v	file:
bx	boot.h	/^			u16 bx, hbx;$/;"	m	struct:biosregs::__anon1::__anon3
call	compressed/eboot.h	/^	efi_status_t (*call)(unsigned long, ...);$/;"	m	struct:efi_config
capabilities	vesa.h	/^	u32 capabilities;	\/* 10 *\/$/;"	m	struct:vesa_general_info
card_info	video.h	/^struct card_info {$/;"	s
card_name	video.h	/^	const char *card_name;$/;"	m	struct:card_info
cga_modes	video-vga.c	/^static struct mode_info cga_modes[] = {$/;"	v	typeref:struct:mode_info	file:
ch	boot.h	/^			u8 cl, ch, ecx2, ecx3;$/;"	m	struct:biosregs::__anon1::__anon4
char_height	vesa.h	/^	u8 char_height;		\/* 23 *\/$/;"	m	struct:vesa_mode_info
char_width	vesa.h	/^	u8 char_width;		\/* 22 *\/$/;"	m	struct:vesa_mode_info
check_cpu	cpucheck.c	/^int check_cpu(int *cpu_level_ptr, int *req_level_ptr, u32 **err_flags_ptr)$/;"	f
check_cpuflags	cpucheck.c	/^static int check_cpuflags(void)$/;"	f	file:
choose_kernel_location	compressed/aslr.c	/^unsigned char *choose_kernel_location(unsigned char *input,$/;"	f
choose_kernel_location	compressed/misc.h	/^unsigned char *choose_kernel_location(unsigned char *input,$/;"	f
cl	boot.h	/^			u8 cl, ch, ecx2, ecx3;$/;"	m	struct:biosregs::__anon1::__anon4
cmd_cpustr	Makefile	/^      cmd_cpustr = $(obj)\/mkcpustr > $@$/;"	m
cmd_image	Makefile	/^cmd_image = $(obj)\/tools\/build $(obj)\/setup.bin $(obj)\/vmlinux.bin \\$/;"	m
cmd_line_ptr	header.S	/^cmd_line_ptr:	.long	0		# (Header version 0x0202 or later)$/;"	l
cmd_mkpiggy	compressed/Makefile	/^      cmd_mkpiggy = $(obj)\/mkpiggy $< $(RUN_SIZE) > $@ || ( rm -f $@ ; false )$/;"	m
cmd_relocs	compressed/Makefile	/^      cmd_relocs = $(CMD_RELOCS) $< > $@;$(CMD_RELOCS) --abs-relocs $<$/;"	m
cmd_voffset	Makefile	/^      cmd_voffset = $(NM) $< | sed -n $(sed-voffset) > $@$/;"	m
cmd_zoffset	Makefile	/^      cmd_zoffset = $(NM) $< | sed -n $(sed-zoffset) > $@$/;"	m
cmdline_find_option	boot.h	/^static inline int cmdline_find_option(const char *option, char *buffer, int bufsize)$/;"	f
cmdline_find_option	compressed/cmdline.c	/^int cmdline_find_option(const char *option, char *buffer, int bufsize)$/;"	f
cmdline_find_option_bool	boot.h	/^static inline int cmdline_find_option_bool(const char *option)$/;"	f
cmdline_find_option_bool	compressed/cmdline.c	/^int cmdline_find_option_bool(const char *option)$/;"	f
cmdline_size	header.S	/^cmdline_size:   .long   COMMAND_LINE_SIZE-1     #length of the command line,$/;"	l
code32_start	header.S	/^code32_start:				# here loaders can put a different$/;"	l
coff_header	header.S	/^coff_header:$/;"	l
cols	compressed/misc.c	/^static int lines, cols;$/;"	v	file:
console_init	compressed/misc.h	/^static inline void console_init(void)$/;"	f
console_init	early_serial_console.c	/^void console_init(void)$/;"	f
constant_test_bit	bitops.h	/^static inline int constant_test_bit(int nr, const void *addr)$/;"	f
copy_boot_params	main.c	/^static void copy_boot_params(void)$/;"	f	file:
cpu	cpuflags.c	/^struct cpu_features cpu;$/;"	v	typeref:struct:cpu_features
cpu_features	cpuflags.h	/^struct cpu_features {$/;"	s
cpu_name	cpu.c	/^static char *cpu_name(int level)$/;"	f	file:
cpu_relax	boot.h	40;"	d
cpu_vendor	cpuflags.c	/^u32 cpu_vendor[3];$/;"	v
cpuid	cpuflags.c	/^static inline void cpuid(u32 id, u32 *a, u32 *b, u32 *c, u32 *d)$/;"	f	file:
crctab32	tools/build.c	/^static const u32 crctab32[] = {$/;"	v	file:
curx	video.c	/^	int curx, cury;$/;"	m	struct:saved_screen	file:
cury	video.c	/^	int curx, cury;$/;"	m	struct:saved_screen	file:
cx	boot.h	/^			u16 cx, hcx;$/;"	m	struct:biosregs::__anon1::__anon3
data	video.c	/^	u16 *data;$/;"	m	struct:saved_screen	file:
dcm_info	vesa.h	/^	u8 dcm_info;		\/* 39 *\/$/;"	m	struct:vesa_mode_info
debug_putstr	compressed/misc.h	/^static inline void debug_putstr(const char *s)$/;"	f
debug_putstr	compressed/misc.h	41;"	d
decompress_kernel	compressed/misc.c	/^asmlinkage __visible void *decompress_kernel(void *rmode, memptr heap,$/;"	f
depth	video.h	/^	u16 depth;		\/* Bits per pixel, 0 for text mode *\/$/;"	m	struct:mode_info
detect_memory	memory.c	/^int detect_memory(void)$/;"	f
detect_memory_88	memory.c	/^static int detect_memory_88(void)$/;"	f	file:
detect_memory_e801	memory.c	/^static int detect_memory_e801(void)$/;"	f	file:
detect_memory_e820	memory.c	/^static int detect_memory_e820(void)$/;"	f	file:
dh	boot.h	/^			u8 dl, dh, edx2, edx3;$/;"	m	struct:biosregs::__anon1::__anon4
di	boot.h	/^			u16 di, hdi;$/;"	m	struct:biosregs::__anon1::__anon3
die	header.S	/^die:$/;"	l
die	tools/build.c	/^static void die(const char * str, ...)$/;"	f	file:
dih	boot.h	/^			u8 dil, dih, edi2, edi3;$/;"	m	struct:biosregs::__anon1::__anon4
dil	boot.h	/^			u8 dil, dih, edi2, edi3;$/;"	m	struct:biosregs::__anon1::__anon4
display_menu	video.c	/^static void display_menu(void)$/;"	f	file:
dl	boot.h	/^			u8 dl, dh, edx2, edx3;$/;"	m	struct:biosregs::__anon1::__anon4
do_restore	video-mode.c	/^int do_restore;		\/* Screen contents changed during mode flip *\/$/;"	v
ds	boot.h	/^			u16 es, ds;$/;"	m	struct:biosregs::__anon1::__anon3
ds	boot.h	/^static inline u16 ds(void)$/;"	f
dx	boot.h	/^			u16 dx, hdx;$/;"	m	struct:biosregs::__anon1::__anon3
early_serial_base	compressed/early_serial_console.c	/^int early_serial_base;$/;"	v
early_serial_base	compressed/misc.h	/^static const int early_serial_base;$/;"	v
early_serial_base	tty.c	/^int early_serial_base;$/;"	v
early_serial_init	early_serial_console.c	/^static void early_serial_init(int port, int baud)$/;"	f	file:
eax	boot.h	/^			u32 eax;$/;"	m	struct:biosregs::__anon1::__anon2
eax2	boot.h	/^			u8 al, ah, eax2, eax3;$/;"	m	struct:biosregs::__anon1::__anon4
eax3	boot.h	/^			u8 al, ah, eax2, eax3;$/;"	m	struct:biosregs::__anon1::__anon4
ebp	boot.h	/^			u32 ebp;$/;"	m	struct:biosregs::__anon1::__anon2
ebp2	boot.h	/^			u8 bpl, bph, ebp2, ebp3;$/;"	m	struct:biosregs::__anon1::__anon4
ebp3	boot.h	/^			u8 bpl, bph, ebp2, ebp3;$/;"	m	struct:biosregs::__anon1::__anon4
ebx	boot.h	/^			u32 ebx;$/;"	m	struct:biosregs::__anon1::__anon2
ebx2	boot.h	/^			u8 bl, bh, ebx2, ebx3;$/;"	m	struct:biosregs::__anon1::__anon4
ebx3	boot.h	/^			u8 bl, bh, ebx2, ebx3;$/;"	m	struct:biosregs::__anon1::__anon4
ecx	boot.h	/^			u32 ecx;$/;"	m	struct:biosregs::__anon1::__anon2
ecx2	boot.h	/^			u8 cl, ch, ecx2, ecx3;$/;"	m	struct:biosregs::__anon1::__anon4
ecx3	boot.h	/^			u8 cl, ch, ecx2, ecx3;$/;"	m	struct:biosregs::__anon1::__anon4
edi	boot.h	/^			u32 edi;$/;"	m	struct:biosregs::__anon1::__anon2
edi2	boot.h	/^			u8 dil, dih, edi2, edi3;$/;"	m	struct:biosregs::__anon1::__anon4
edi3	boot.h	/^			u8 dil, dih, edi2, edi3;$/;"	m	struct:biosregs::__anon1::__anon4
edx	boot.h	/^			u32 edx;$/;"	m	struct:biosregs::__anon1::__anon2
edx2	boot.h	/^			u8 dl, dh, edx2, edx3;$/;"	m	struct:biosregs::__anon1::__anon4
edx3	boot.h	/^			u8 dl, dh, edx2, edx3;$/;"	m	struct:biosregs::__anon1::__anon4
efi32_config	compressed/head_32.S	/^efi32_config:$/;"	l
efi32_config	compressed/head_64.S	/^efi32_config:$/;"	l
efi32_stub_entry	tools/build.c	/^unsigned long efi32_stub_entry;$/;"	v
efi64_config	compressed/head_64.S	/^efi64_config:$/;"	l
efi64_stub_entry	tools/build.c	/^unsigned long efi64_stub_entry;$/;"	v
efi_call_early	compressed/eboot.c	24;"	d	file:
efi_char16_printk	compressed/eboot.c	/^void efi_char16_printk(efi_system_table_t *table, efi_char16_t *str)$/;"	f
efi_config	compressed/eboot.h	/^struct efi_config {$/;"	s
efi_config	compressed/head_64.S	/^efi_config:$/;"	l
efi_early	compressed/eboot.c	/^static struct efi_config *efi_early;$/;"	v	typeref:struct:efi_config	file:
efi_file_close	compressed/eboot.c	/^efi_status_t efi_file_close(void *handle)$/;"	f
efi_file_read	compressed/eboot.c	/^efi_file_read(void *handle, unsigned long *size, void *addr)$/;"	f
efi_file_size	compressed/eboot.c	/^efi_file_size(efi_system_table_t *sys_table, void *__fh,$/;"	f
efi_graphics_output_mode_info	compressed/eboot.h	/^struct efi_graphics_output_mode_info {$/;"	s
efi_graphics_output_protocol	compressed/eboot.h	/^struct efi_graphics_output_protocol {$/;"	s
efi_graphics_output_protocol_32	compressed/eboot.h	/^struct efi_graphics_output_protocol_32 {$/;"	s
efi_graphics_output_protocol_64	compressed/eboot.h	/^struct efi_graphics_output_protocol_64 {$/;"	s
efi_graphics_output_protocol_mode	compressed/eboot.h	/^struct efi_graphics_output_protocol_mode {$/;"	s
efi_graphics_output_protocol_mode_32	compressed/eboot.h	/^struct efi_graphics_output_protocol_mode_32 {$/;"	s
efi_graphics_output_protocol_mode_64	compressed/eboot.h	/^struct efi_graphics_output_protocol_mode_64 {$/;"	s
efi_main	compressed/eboot.c	/^struct boot_params *efi_main(struct efi_config *c,$/;"	f
efi_open_volume	compressed/eboot.c	/^efi_open_volume(efi_system_table_t *sys_table, void *__image, void **__fh)$/;"	f
efi_pe_entry	tools/build.c	/^unsigned long efi_pe_entry;$/;"	v
efi_pixel_bitmask	compressed/eboot.h	/^struct efi_pixel_bitmask {$/;"	s
efi_rt_function_ptr	compressed/efi_stub_32.S	/^efi_rt_function_ptr:$/;"	l
efi_stub_defaults	tools/build.c	/^static inline void efi_stub_defaults(void) {}$/;"	f	file:
efi_stub_defaults	tools/build.c	/^static void efi_stub_defaults(void)$/;"	f	file:
efi_stub_entry_update	tools/build.c	/^static inline void efi_stub_entry_update(void) {}$/;"	f	file:
efi_stub_entry_update	tools/build.c	/^static void efi_stub_entry_update(void)$/;"	f	file:
efi_uga_draw_protocol	compressed/eboot.h	/^struct efi_uga_draw_protocol {$/;"	s
efi_uga_draw_protocol_32	compressed/eboot.h	/^struct efi_uga_draw_protocol_32 {$/;"	s
efi_uga_draw_protocol_64	compressed/eboot.h	/^struct efi_uga_draw_protocol_64 {$/;"	s
eflags	boot.h	/^			u32 eflags;$/;"	m	struct:biosregs::__anon1::__anon2
ega_modes	video-vga.c	/^static struct mode_info ega_modes[] = {$/;"	v	typeref:struct:mode_info	file:
empty_8042	a20.c	/^static int empty_8042(void)$/;"	f	file:
enable_a20	a20.c	/^int enable_a20(void)$/;"	f
enable_a20_bios	a20.c	/^static void enable_a20_bios(void)$/;"	f	file:
enable_a20_fast	a20.c	/^static void enable_a20_fast(void)$/;"	f	file:
enable_a20_kbc	a20.c	/^static void enable_a20_kbc(void)$/;"	f	file:
err_flags	cpucheck.c	/^static u32 err_flags[NCAPINTS];$/;"	v	file:
error	compressed/misc.c	/^static void error(char *x)$/;"	f	file:
error_putstr	compressed/misc.h	37;"	d
es	boot.h	/^			u16 es, ds;$/;"	m	struct:biosregs::__anon1::__anon3
esi	boot.h	/^			u32 esi;$/;"	m	struct:biosregs::__anon1::__anon2
esi2	boot.h	/^			u8 sil, sih, esi2, esi3;$/;"	m	struct:biosregs::__anon1::__anon4
esi3	boot.h	/^			u8 sil, sih, esi2, esi3;$/;"	m	struct:biosregs::__anon1::__anon4
exit_boot	compressed/eboot.c	/^static efi_status_t exit_boot(struct boot_params *boot_params,$/;"	f	file:
exit_boot_services	compressed/eboot.h	/^	u64 exit_boot_services;$/;"	m	struct:efi_config
ext_loader_type	header.S	/^ext_loader_type:$/;"	l
ext_loader_ver	header.S	/^ext_loader_ver:$/;"	l
extra_header_fields	header.S	/^extra_header_fields:$/;"	l
fail	compressed/head_32.S	/^fail:$/;"	l
fail	compressed/head_64.S	/^fail:$/;"	l
far_ptr	vesa.h	/^} far_ptr;$/;"	t	typeref:struct:__anon5
find_bits	compressed/eboot.c	/^static void find_bits(unsigned long mask, u8 *pos, u8 *size)$/;"	f	file:
find_random_addr	compressed/aslr.c	/^static unsigned long find_random_addr(unsigned long minimum,$/;"	f	file:
flags	boot.h	/^			u16 flags, hflags;$/;"	m	struct:biosregs::__anon1::__anon3
flags	cpuflags.h	/^	u32 flags[NCAPINTS];$/;"	m	struct:cpu_features
force_x	video-mode.c	/^int force_x, force_y;	\/* Don't query the BIOS for cols\/rows *\/$/;"	v
force_y	video-mode.c	/^int force_x, force_y;	\/* Don't query the BIOS for cols\/rows *\/$/;"	v
frame_buffer_base	compressed/eboot.h	/^	u64 frame_buffer_base;$/;"	m	struct:efi_graphics_output_protocol_mode
frame_buffer_base	compressed/eboot.h	/^	u64 frame_buffer_base;$/;"	m	struct:efi_graphics_output_protocol_mode_32
frame_buffer_base	compressed/eboot.h	/^	u64 frame_buffer_base;$/;"	m	struct:efi_graphics_output_protocol_mode_64
frame_buffer_size	compressed/eboot.h	/^	u32 frame_buffer_size;$/;"	m	struct:efi_graphics_output_protocol_mode_32
frame_buffer_size	compressed/eboot.h	/^	u64 frame_buffer_size;$/;"	m	struct:efi_graphics_output_protocol_mode_64
frame_buffer_size	compressed/eboot.h	/^	unsigned long frame_buffer_size;$/;"	m	struct:efi_graphics_output_protocol_mode
free_mem_end_ptr	compressed/misc.c	/^memptr free_mem_end_ptr;$/;"	v
free_mem_ptr	compressed/misc.c	/^memptr free_mem_ptr;$/;"	v
free_pages	compressed/eboot.h	/^	u64 free_pages;$/;"	m	struct:efi_config
free_pool	compressed/eboot.h	/^	u64 free_pool;$/;"	m	struct:efi_config
fs	boot.h	/^			u16 gs, fs;$/;"	m	struct:biosregs::__anon1::__anon3
fs	boot.h	/^static inline u16 fs(void)$/;"	f
fs	compressed/cmdline.c	/^static unsigned long fs;$/;"	v	file:
gdt	compressed/head_64.S	/^gdt:$/;"	l
gdt_end	compressed/head_64.S	/^gdt_end:$/;"	l
gdt_ptr	pm.c	/^struct gdt_ptr {$/;"	s	file:
get_cmd_line_ptr	compressed/cmdline.c	/^static unsigned long get_cmd_line_ptr(void)$/;"	f	file:
get_cpuflags	cpuflags.c	/^void get_cpuflags(void)$/;"	f
get_edd_info	edd.c	/^static int get_edd_info(u8 devno, struct edd_info *ei)$/;"	f	file:
get_entry	video.c	/^static unsigned int get_entry(void)$/;"	f	file:
get_memory_map	compressed/eboot.h	/^	u64 get_memory_map;$/;"	m	struct:efi_config
get_mode	compressed/eboot.h	/^	u32 get_mode;$/;"	m	struct:efi_uga_draw_protocol_32
get_mode	compressed/eboot.h	/^	u64 get_mode;$/;"	m	struct:efi_uga_draw_protocol_64
get_mode	compressed/eboot.h	/^	void *get_mode;$/;"	m	struct:efi_uga_draw_protocol
get_random_boot	compressed/aslr.c	/^static unsigned long get_random_boot(void)$/;"	f	file:
get_random_long	compressed/aslr.c	/^static unsigned long get_random_long(void)$/;"	f	file:
getchar	tty.c	/^int getchar(void)$/;"	f
getchar_timeout	tty.c	/^int getchar_timeout(void)$/;"	f
gettime	tty.c	/^static u8 gettime(void)$/;"	f	file:
gmask	vesa.h	/^	u8 gmask;		\/* 33 *\/$/;"	m	struct:vesa_mode_info
go_to_protected_mode	pm.c	/^void go_to_protected_mode(void)$/;"	f
gpos	vesa.h	/^	u8 gpos;		\/* 34 *\/$/;"	m	struct:vesa_mode_info
graphic_mode	video-mode.c	/^int graphic_mode;	\/* Graphic mode with linear frame buffer *\/$/;"	v
green_mask	compressed/eboot.h	/^	u32 green_mask;$/;"	m	struct:efi_pixel_bitmask
gs	boot.h	/^			u16 gs, fs;$/;"	m	struct:biosregs::__anon1::__anon3
gs	boot.h	/^static inline u16 gs(void)$/;"	f
h_res	vesa.h	/^	u16 h_res;		\/* 18 *\/$/;"	m	struct:vesa_mode_info
handle_protocol	compressed/eboot.h	/^	u64 handle_protocol;$/;"	m	struct:efi_config
handle_relocations	compressed/misc.c	/^static inline void handle_relocations(void *output, unsigned long output_len)$/;"	f	file:
handle_relocations	compressed/misc.c	/^static void handle_relocations(void *output, unsigned long output_len)$/;"	f	file:
handover_entry	compressed/head_64.S	/^handover_entry:$/;"	l
handover_offset	header.S	/^handover_offset:	.long 0			# Filled in by build.c$/;"	l
hardware_subarch	header.S	/^hardware_subarch:	.long 0			# subarchitecture, added with 2.07$/;"	l
hardware_subarch_data	header.S	/^hardware_subarch_data:	.quad 0$/;"	l
has_cpuflag	compressed/cpuflags.c	/^bool has_cpuflag(int flag)$/;"	f
has_eflag	cpuflags.c	/^int has_eflag(unsigned long mask)$/;"	f
has_fpu	cpuflags.c	/^static int has_fpu(void)$/;"	f	file:
hax	boot.h	/^			u16 ax, hax;$/;"	m	struct:biosregs::__anon1::__anon3
hbp	boot.h	/^			u16 bp, hbp;$/;"	m	struct:biosregs::__anon1::__anon3
hbx	boot.h	/^			u16 bx, hbx;$/;"	m	struct:biosregs::__anon1::__anon3
hcx	boot.h	/^			u16 cx, hcx;$/;"	m	struct:biosregs::__anon1::__anon3
hdi	boot.h	/^			u16 di, hdi;$/;"	m	struct:biosregs::__anon1::__anon3
hdr	header.S	/^hdr:$/;"	l
hdx	boot.h	/^			u16 dx, hdx;$/;"	m	struct:biosregs::__anon1::__anon3
heap_end	main.c	/^char *heap_end = _end;		\/* Default end of heap = no heap *\/$/;"	v
heap_end_ptr	header.S	/^heap_end_ptr:	.word	_end+STACK_SIZE-512$/;"	l
heap_free	boot.h	/^static inline bool heap_free(size_t n)$/;"	f
hflags	boot.h	/^			u16 flags, hflags;$/;"	m	struct:biosregs::__anon1::__anon3
horizontal_resolution	compressed/eboot.h	/^	u32 horizontal_resolution;$/;"	m	struct:efi_graphics_output_mode_info
hostprogs-y	Makefile	/^hostprogs-y	:= tools\/build$/;"	m
hostprogs-y	compressed/Makefile	/^hostprogs-y	:= mkpiggy$/;"	m
hsi	boot.h	/^			u16 si, hsi;$/;"	m	struct:biosregs::__anon1::__anon3
i8254	compressed/aslr.c	/^static inline u16 i8254(void)$/;"	f	file:
image_cmdline	Makefile	/^image_cmdline = default linux $(FDARGS) $(if $(FDINITRD),initrd=initrd.img,)$/;"	m
image_handle	compressed/eboot.h	/^	u64 image_handle;$/;"	m	struct:efi_config
image_planes	vesa.h	/^	u8 image_planes;	\/* 29 *\/$/;"	m	struct:vesa_mode_info
in_idx	video.h	/^static inline u8 in_idx(u16 port, u8 index)$/;"	f
inb	boot.h	/^static inline u8 inb(u16 port)$/;"	f
info	compressed/eboot.h	/^	u32 info;$/;"	m	struct:efi_graphics_output_protocol_mode_32
info	compressed/eboot.h	/^	u64 info;$/;"	m	struct:efi_graphics_output_protocol_mode_64
info	compressed/eboot.h	/^	unsigned long info;$/;"	m	struct:efi_graphics_output_protocol_mode
init_heap	main.c	/^static void init_heap(void)$/;"	f	file:
init_size	header.S	/^init_size:		.long INIT_SIZE		# kernel initialization size$/;"	l
initrd_addr_max	header.S	/^initrd_addr_max: .long 0x7fffffff$/;"	l
initregs	regs.c	/^void initregs(struct biosregs *reg)$/;"	f
inl	boot.h	/^static inline u32 inl(u16 port)$/;"	f
intcall	bioscall.S	/^intcall:$/;"	l
inw	boot.h	/^static inline u16 inw(u16 port)$/;"	f
io_delay	boot.h	/^static inline void io_delay(void)$/;"	f
is64	compressed/eboot.h	/^	bool is64;$/;"	m	struct:efi_config
is_amd	cpucheck.c	/^static int is_amd(void)$/;"	f	file:
is_big_kernel	tools/build.c	/^int is_big_kernel;$/;"	v
is_centaur	cpucheck.c	/^static int is_centaur(void)$/;"	f	file:
is_intel	cpucheck.c	/^static int is_intel(void)$/;"	f	file:
is_transmeta	cpucheck.c	/^static int is_transmeta(void)$/;"	f	file:
isdigit	ctype.h	/^static inline int isdigit(int ch)$/;"	f
isxdigit	ctype.h	/^static inline int isxdigit(int ch)$/;"	f
kbd_flush	tty.c	/^void kbd_flush(void)$/;"	f
kbd_pending	tty.c	/^static int kbd_pending(void)$/;"	f	file:
kernel_alignment	header.S	/^kernel_alignment:  .long CONFIG_PHYSICAL_ALIGN	#physical addr alignment$/;"	l
kernel_version	version.c	/^const char kernel_version[] =$/;"	v
keyboard_init	main.c	/^static void keyboard_init(void)$/;"	f	file:
len	pm.c	/^	u16 len;$/;"	m	struct:gdt_ptr	file:
level	cpuflags.h	/^	int level;		\/* Family, or 64 for x86-64 *\/$/;"	m	struct:cpu_features
lfb_ptr	vesa.h	/^	u32 lfb_ptr;		\/* 40 Linear frame buffer address *\/$/;"	m	struct:vesa_mode_info
lines	compressed/misc.c	/^static int lines, cols;$/;"	v	file:
loaded_flags	cpuflags.c	/^static bool loaded_flags;$/;"	v	file:
loadflags	header.S	/^loadflags:$/;"	l
locate_handle	compressed/eboot.h	/^	u64 locate_handle;$/;"	m	struct:efi_config
logical_scan	vesa.h	/^	u16 logical_scan;	\/* 16 *\/$/;"	m	struct:vesa_mode_info
main	compressed/mkpiggy.c	/^int main(int argc, char *argv[])$/;"	f
main	main.c	/^void main(void)$/;"	f
main	mkcpustr.c	/^int main(void)$/;"	f
main	tools/build.c	/^int main(int argc, char ** argv)$/;"	f
make_boot_params	compressed/eboot.c	/^struct boot_params *make_boot_params(struct efi_config *c)$/;"	f
mask_all_interrupts	pm.c	/^static void mask_all_interrupts(void)$/;"	f	file:
max_mode	compressed/eboot.h	/^	u32 max_mode;$/;"	m	struct:efi_graphics_output_protocol_mode
max_mode	compressed/eboot.h	/^	u32 max_mode;$/;"	m	struct:efi_graphics_output_protocol_mode_32
max_mode	compressed/eboot.h	/^	u32 max_mode;$/;"	m	struct:efi_graphics_output_protocol_mode_64
mem_avoid	compressed/aslr.c	/^static struct mem_vector mem_avoid[MEM_AVOID_MAX];$/;"	v	typeref:struct:mem_vector	file:
mem_avoid_init	compressed/aslr.c	/^static void mem_avoid_init(unsigned long input, unsigned long input_size,$/;"	f	file:
mem_avoid_overlap	compressed/aslr.c	/^static bool mem_avoid_overlap(struct mem_vector *img)$/;"	f	file:
mem_contains	compressed/aslr.c	/^static bool mem_contains(struct mem_vector *region, struct mem_vector *item)$/;"	f	file:
mem_overlaps	compressed/aslr.c	/^static bool mem_overlaps(struct mem_vector *one, struct mem_vector *two)$/;"	f	file:
mem_vector	compressed/aslr.c	/^struct mem_vector {$/;"	s	file:
memcmp	string.c	/^int memcmp(const void *s1, const void *s2, size_t len)$/;"	f
memcmp	string.h	19;"	d
memcmp	string.h	7;"	d
memcmp_fs	boot.h	/^static inline int memcmp_fs(const void *s1, addr_t s2, size_t len)$/;"	f
memcmp_gs	boot.h	/^static inline int memcmp_gs(const void *s1, addr_t s2, size_t len)$/;"	f
memcpy	compressed/eboot.c	16;"	d	file:
memcpy	compressed/misc.c	101;"	d	file:
memcpy	compressed/string.c	/^void *memcpy(void *dest, const void *src, size_t n)$/;"	f
memcpy	string.h	17;"	d
memcpy	string.h	5;"	d
memory_layout	vesa.h	/^	u8 memory_layout;	\/* 27 *\/$/;"	m	struct:vesa_mode_info
memory_planes	vesa.h	/^	u8 memory_planes;	\/* 24 *\/$/;"	m	struct:vesa_mode_info
memptr	compressed/misc.h	27;"	d
memptr	compressed/misc.h	29;"	d
memset	compressed/misc.c	108;"	d	file:
memset	compressed/string.c	/^void *memset(void *s, int c, size_t n)$/;"	f
memset	string.h	18;"	d
memset	string.h	6;"	d
memzero	compressed/misc.c	109;"	d	file:
min_alignment	header.S	/^min_alignment:		.byte MIN_KERNEL_ALIGN_LG2	# minimum alignment$/;"	l
mode	compressed/eboot.h	/^	struct efi_graphics_output_protocol_mode *mode;$/;"	m	struct:efi_graphics_output_protocol	typeref:struct:efi_graphics_output_protocol::efi_graphics_output_protocol_mode
mode	compressed/eboot.h	/^	u32 mode;$/;"	m	struct:efi_graphics_output_protocol_32
mode	compressed/eboot.h	/^	u32 mode;$/;"	m	struct:efi_graphics_output_protocol_mode
mode	compressed/eboot.h	/^	u32 mode;$/;"	m	struct:efi_graphics_output_protocol_mode_32
mode	compressed/eboot.h	/^	u32 mode;$/;"	m	struct:efi_graphics_output_protocol_mode_64
mode	compressed/eboot.h	/^	u64 mode;$/;"	m	struct:efi_graphics_output_protocol_64
mode	video.h	/^	u16 mode;		\/* Mode number (vga= style) *\/$/;"	m	struct:mode_info
mode_attr	vesa.h	/^	u16 mode_attr;		\/* 0 *\/$/;"	m	struct:vesa_mode_info
mode_defined	video-mode.c	/^int mode_defined(u16 mode)$/;"	f
mode_info	video.h	/^struct mode_info {$/;"	s
mode_menu	video.c	/^static unsigned int mode_menu(void)$/;"	f	file:
model	cpuflags.h	/^	int model;$/;"	m	struct:cpu_features
modes	video.h	/^	struct mode_info *modes;$/;"	m	struct:card_info	typeref:struct:card_info::mode_info
msg_loop	header.S	/^msg_loop:$/;"	l
myisspace	cmdline.c	/^static inline int myisspace(u8 c)$/;"	f	file:
nmodes	video.h	/^	int nmodes;		\/* Number of probed modes so far *\/$/;"	m	struct:card_info
no_longmode	compressed/head_64.S	/^no_longmode:$/;"	l
number	printf.c	/^static char *number(char *str, long num, int base, int size, int precision,$/;"	f	file:
off	vesa.h	/^	u16 off, seg;$/;"	m	struct:__anon5
offscreen_ptr	vesa.h	/^	u32 offscreen_ptr;	\/* 44 Offscreen memory address *\/$/;"	m	struct:vesa_mode_info
offscreen_size	vesa.h	/^	u16 offscreen_size;	\/* 48 *\/$/;"	m	struct:vesa_mode_info
optional_header	header.S	/^optional_header:$/;"	l
out_idx	video.h	/^static inline void out_idx(u8 v, u16 port, u8 index)$/;"	f
outb	boot.h	/^static inline void outb(u8 v, u16 port)$/;"	f
outl	boot.h	/^static inline void outl(u32 v, u16 port)$/;"	f
outw	boot.h	/^static inline void outw(u16 v, u16 port)$/;"	f
page_function	vesa.h	/^	u8 page_function;	\/* 30 *\/$/;"	m	struct:vesa_mode_info
parse_console_uart8250	early_serial_console.c	/^static void parse_console_uart8250(void)$/;"	f	file:
parse_earlyprintk	early_serial_console.c	/^static void parse_earlyprintk(void)$/;"	f	file:
parse_elf	compressed/misc.c	/^static void parse_elf(void *output)$/;"	f	file:
parse_zoffset	tools/build.c	/^static void parse_zoffset(char *fname)$/;"	f	file:
partial_crc32	tools/build.c	/^static u32 partial_crc32(const u8 *s, int len, u32 crc)$/;"	f	file:
partial_crc32_one	tools/build.c	/^static u32 partial_crc32_one(u8 c, u32 crc)$/;"	f	file:
payload_length	header.S	/^payload_length:		.long ZO_z_input_len$/;"	l
payload_offset	header.S	/^payload_offset:		.long ZO_input_data$/;"	l
pe_header	header.S	/^pe_header:$/;"	l
pgtable	compressed/head_64.S	/^pgtable:$/;"	l
pixel_format	compressed/eboot.h	/^	int pixel_format;$/;"	m	struct:efi_graphics_output_mode_info
pixel_information	compressed/eboot.h	/^	struct efi_pixel_bitmask pixel_information;$/;"	m	struct:efi_graphics_output_mode_info	typeref:struct:efi_graphics_output_mode_info::efi_pixel_bitmask
pixels_per_scan_line	compressed/eboot.h	/^	u32 pixels_per_scan_line;$/;"	m	struct:efi_graphics_output_mode_info
pref_address	header.S	/^pref_address:		.quad LOAD_PHYSICAL_ADDR	# preferred load addr$/;"	l
preferred_addr	compressed/head_32.S	/^preferred_addr:$/;"	l
preferred_addr	compressed/head_64.S	/^preferred_addr:$/;"	l
printf	printf.c	/^int printf(const char *fmt, ...)$/;"	f
probe	video.h	/^	int (*probe)(void);$/;"	m	struct:card_info
probe_baud	early_serial_console.c	/^static unsigned int probe_baud(int port)$/;"	f	file:
probe_cards	video-mode.c	/^void probe_cards(int unsafe)$/;"	f
process_e820_entry	compressed/aslr.c	/^static void process_e820_entry(struct e820entry *entry,$/;"	f	file:
ptr	pm.c	/^	u32 ptr;$/;"	m	struct:gdt_ptr	file:
putchar	tty.c	/^void __attribute__((section(".inittext"))) putchar(int ch)$/;"	f
puts	tty.c	/^void __attribute__((section(".inittext"))) puts(const char *str)$/;"	f
query_apm_bios	apm.c	/^int query_apm_bios(void)$/;"	f
query_edd	edd.c	/^void query_edd(void)$/;"	f
query_ist	main.c	/^static void query_ist(void)$/;"	f	file:
query_mca	mca.c	/^int query_mca(void)$/;"	f
query_mode	compressed/eboot.h	/^	u32 query_mode;$/;"	m	struct:efi_graphics_output_protocol_32
query_mode	compressed/eboot.h	/^	u64 query_mode;$/;"	m	struct:efi_graphics_output_protocol_64
query_mode	compressed/eboot.h	/^	void *query_mode;$/;"	m	struct:efi_graphics_output_protocol
quiet_cmd_cpustr	Makefile	/^quiet_cmd_cpustr = CPUSTR  $@$/;"	m
quiet_cmd_image	Makefile	/^quiet_cmd_image = BUILD   $@$/;"	m
quiet_cmd_mkpiggy	compressed/Makefile	/^quiet_cmd_mkpiggy = MKPIGGY $@$/;"	m
quiet_cmd_relocs	compressed/Makefile	/^quiet_cmd_relocs = RELOCS  $@$/;"	m
quiet_cmd_voffset	Makefile	/^quiet_cmd_voffset = VOFFSET $@$/;"	m
quiet_cmd_zoffset	Makefile	/^quiet_cmd_zoffset = ZOFFSET $@$/;"	m
ram_size	header.S	/^ram_size:	.word 0			\/* Obsolete *\/$/;"	l
ramdisk_image	header.S	/^ramdisk_image:	.long	0		# address of loaded ramdisk image$/;"	l
ramdisk_size	header.S	/^ramdisk_size:	.long	0		# its size in bytes$/;"	l
raw_set_mode	video-mode.c	/^static int raw_set_mode(u16 mode, u16 *real_mode)$/;"	f	file:
rdfs16	boot.h	/^static inline u16 rdfs16(addr_t addr)$/;"	f
rdfs32	boot.h	/^static inline u32 rdfs32(addr_t addr)$/;"	f
rdfs8	boot.h	/^static inline u8 rdfs8(addr_t addr)$/;"	f
rdfs8	compressed/cmdline.c	/^static inline char rdfs8(addr_t addr)$/;"	f	file:
rdgs16	boot.h	/^static inline u16 rdgs16(addr_t addr)$/;"	f
rdgs32	boot.h	/^static inline u32 rdgs32(addr_t addr)$/;"	f
rdgs8	boot.h	/^static inline u8 rdgs8(addr_t addr)$/;"	f
read_mbr	edd.c	/^static int read_mbr(u8 devno, void *buf)$/;"	f	file:
read_mbr_sig	edd.c	/^static u32 read_mbr_sig(u8 devno, struct edd_info *ei, u32 *mbrsig)$/;"	f	file:
real_mode	compressed/misc.c	/^struct boot_params *real_mode;		\/* Pointer to real-mode data *\/$/;"	v	typeref:struct:boot_params
realmode_switch_hook	pm.c	/^static void realmode_switch_hook(void)$/;"	f	file:
realmode_swtch	header.S	/^realmode_swtch:	.word	0, 0		# default_switch, SETUPSEG$/;"	l
red_mask	compressed/eboot.h	/^	u32 red_mask;$/;"	m	struct:efi_pixel_bitmask
relocatable_kernel	header.S	/^relocatable_kernel:    .byte 0$/;"	l
relocatable_kernel	header.S	/^relocatable_kernel:    .byte 1$/;"	l
relocated	compressed/head_32.S	/^relocated:$/;"	l
relocated	compressed/head_64.S	/^relocated:$/;"	l
req_flags	cpucheck.c	/^static const u32 req_flags[NCAPINTS] =$/;"	v	file:
req_level	cpucheck.c	/^static const int req_level = CONFIG_X86_MINIMUM_CPU_FAMILY;$/;"	v	file:
reserve_pecoff_reloc_section	tools/build.c	/^static inline int reserve_pecoff_reloc_section(int c)$/;"	f	file:
reserve_pecoff_reloc_section	tools/build.c	/^static int reserve_pecoff_reloc_section(int c)$/;"	f	file:
reserved	vesa.h	/^	u8 reserved[206];	\/* 50 *\/$/;"	m	struct:vesa_mode_info
reserved	vesa.h	/^	u8 reserved[236];	\/* 20 *\/$/;"	m	struct:vesa_general_info
reserved_mask	compressed/eboot.h	/^	u32 reserved_mask;$/;"	m	struct:efi_pixel_bitmask
reset_coprocessor	pm.c	/^static void reset_coprocessor(void)$/;"	f	file:
restore_screen	video.c	/^static void restore_screen(void)$/;"	f	file:
resv_mask	vesa.h	/^	u8 resv_mask;		\/* 37 *\/$/;"	m	struct:vesa_mode_info
resv_pos	vesa.h	/^	u8 resv_pos;		\/* 38 *\/$/;"	m	struct:vesa_mode_info
rmask	vesa.h	/^	u8 rmask;		\/* 31 *\/$/;"	m	struct:vesa_mode_info
root_dev	header.S	/^root_dev:	.word 0			\/* Filled in by build.c *\/$/;"	l
root_flags	header.S	/^root_flags:	.word ROOT_RDONLY$/;"	l
rotate_xor	compressed/aslr.c	/^static unsigned long rotate_xor(unsigned long hash, const void *area,$/;"	f	file:
rpos	vesa.h	/^	u8 rpos;		\/* 32 *\/$/;"	m	struct:vesa_mode_info
save_screen	video.c	/^static void save_screen(void)$/;"	f	file:
saved	video.c	/^} saved;$/;"	v	typeref:struct:saved_screen	file:
saved_return_addr	compressed/efi_stub_32.S	/^saved_return_addr:$/;"	l
saved_screen	video.c	/^static struct saved_screen {$/;"	s	file:
scroll	compressed/misc.c	/^static void scroll(void)$/;"	f	file:
section_table	header.S	/^section_table:$/;"	l
sed-voffset	Makefile	/^sed-voffset := -e 's\/^\\([0-9a-fA-F]*\\) [ABCDGRSTVW] \\(_text\\|_end\\)$$\/\\#define VO_\\2 0x\\1\/p'$/;"	m
sed-zoffset	Makefile	/^sed-zoffset := -e 's\/^\\([0-9a-fA-F]*\\) [ABCDGRSTVW] \\(startup_32\\|startup_64\\|efi32_stub_entry\\|efi64_stub_entry\\|efi_pe_entry\\|input_data\\|_end\\|z_.*\\)$$\/\\#define ZO_\\2 0x\\1\/p'$/;"	m
seg	vesa.h	/^	u16 off, seg;$/;"	m	struct:__anon5
sentinel	header.S	/^sentinel:	.byte 0xff, 0xff        \/* Used to detect broken loaders *\/$/;"	l
serial_putchar	compressed/misc.c	/^static void serial_putchar(int ch)$/;"	f	file:
serial_putchar	tty.c	/^static void __attribute__((section(".inittext"))) serial_putchar(int ch)$/;"	f	file:
set_bios_mode	main.c	/^static void set_bios_mode(void)$/;"	f	file:
set_bios_mode	video-bios.c	/^static int set_bios_mode(u8 mode)$/;"	f	file:
set_bit	bitops.h	/^static inline void set_bit(int nr, void *addr)$/;"	f
set_fs	boot.h	/^static inline void set_fs(u16 seg)$/;"	f
set_fs	compressed/cmdline.c	/^static inline void set_fs(unsigned long seg)$/;"	f	file:
set_gs	boot.h	/^static inline void set_gs(u16 seg)$/;"	f
set_mode	compressed/eboot.h	/^	u32 set_mode;$/;"	m	struct:efi_graphics_output_protocol_32
set_mode	compressed/eboot.h	/^	u32 set_mode;$/;"	m	struct:efi_uga_draw_protocol_32
set_mode	compressed/eboot.h	/^	u64 set_mode;$/;"	m	struct:efi_graphics_output_protocol_64
set_mode	compressed/eboot.h	/^	u64 set_mode;$/;"	m	struct:efi_uga_draw_protocol_64
set_mode	compressed/eboot.h	/^	unsigned long set_mode;$/;"	m	struct:efi_graphics_output_protocol
set_mode	compressed/eboot.h	/^	void *set_mode;$/;"	m	struct:efi_uga_draw_protocol
set_mode	video-mode.c	/^int set_mode(u16 mode)$/;"	f
set_mode	video.h	/^	int (*set_mode)(struct mode_info *mode);$/;"	m	struct:card_info
set_video	video.c	/^void set_video(void)$/;"	f
setup_bad	header.S	/^setup_bad:$/;"	l
setup_corrupt	header.S	/^setup_corrupt:$/;"	l
setup_data	header.S	/^setup_data:		.quad 0			# 64-bit physical pointer to$/;"	l
setup_e820	compressed/eboot.c	/^static efi_status_t setup_e820(struct boot_params *params,$/;"	f	file:
setup_efi_pci	compressed/eboot.c	/^static void setup_efi_pci(struct boot_params *params)$/;"	f	file:
setup_efi_pci32	compressed/eboot.c	/^setup_efi_pci32(struct boot_params *params, void **pci_handle,$/;"	f	file:
setup_efi_pci64	compressed/eboot.c	/^setup_efi_pci64(struct boot_params *params, void **pci_handle,$/;"	f	file:
setup_gdt	pm.c	/^static void setup_gdt(void)$/;"	f	file:
setup_gop	compressed/eboot.c	/^static efi_status_t setup_gop(struct screen_info *si, efi_guid_t *proto,$/;"	f	file:
setup_gop32	compressed/eboot.c	/^setup_gop32(struct screen_info *si, efi_guid_t *proto,$/;"	f	file:
setup_gop64	compressed/eboot.c	/^setup_gop64(struct screen_info *si, efi_guid_t *proto,$/;"	f	file:
setup_graphics	compressed/eboot.c	/^void setup_graphics(struct boot_params *boot_params)$/;"	f
setup_idt	pm.c	/^static void setup_idt(void)$/;"	f	file:
setup_move_size	header.S	/^setup_move_size: .word  0x8000		# size to move, when setup is not$/;"	l
setup_pixel_info	compressed/eboot.c	/^setup_pixel_info(struct screen_info *si, u32 pixels_per_scan_line,$/;"	f	file:
setup_sects	header.S	/^setup_sects:	.byte 0			\/* Filled in by build.c *\/$/;"	l
setup_uga	compressed/eboot.c	/^static efi_status_t setup_uga(struct screen_info *si, efi_guid_t *uga_proto,$/;"	f	file:
setup_uga32	compressed/eboot.c	/^setup_uga32(void **uga_handle, unsigned long size, u32 *width, u32 *height)$/;"	f	file:
setup_uga64	compressed/eboot.c	/^setup_uga64(void **uga_handle, unsigned long size, u32 *width, u32 *height)$/;"	f	file:
show_cap_strs	cpu.c	/^static void show_cap_strs(u32 *err_flags)$/;"	f	file:
si	boot.h	/^			u16 si, hsi;$/;"	m	struct:biosregs::__anon1::__anon3
signature	vesa.h	/^	u32 signature;		\/* 0 Magic number = "VESA" *\/$/;"	m	struct:vesa_general_info
sih	boot.h	/^			u8 sil, sih, esi2, esi3;$/;"	m	struct:biosregs::__anon1::__anon4
sil	boot.h	/^			u8 sil, sih, esi2, esi3;$/;"	m	struct:biosregs::__anon1::__anon4
simple_guess_base	string.c	/^static unsigned int simple_guess_base(const char *cp)$/;"	f	file:
simple_strtoull	string.c	/^unsigned long long simple_strtoull(const char *cp, char **endp, unsigned int base)$/;"	f
size	compressed/aslr.c	/^	unsigned long size;$/;"	m	struct:mem_vector	file:
size_of_info	compressed/eboot.h	/^	u32 size_of_info;$/;"	m	struct:efi_graphics_output_protocol_mode_32
size_of_info	compressed/eboot.h	/^	u64 size_of_info;$/;"	m	struct:efi_graphics_output_protocol_mode_64
size_of_info	compressed/eboot.h	/^	unsigned long size_of_info;$/;"	m	struct:efi_graphics_output_protocol_mode
skip_atoi	printf.c	/^static int skip_atoi(const char **s)$/;"	f	file:
slot_max	compressed/aslr.c	/^static unsigned long slot_max;$/;"	v	file:
slots	compressed/aslr.c	/^static unsigned long slots[CONFIG_RANDOMIZE_BASE_MAX_OFFSET \/$/;"	v	file:
slots_append	compressed/aslr.c	/^static void slots_append(unsigned long addr)$/;"	f	file:
slots_fetch_random	compressed/aslr.c	/^static unsigned long slots_fetch_random(void)$/;"	f	file:
sprintf	printf.c	/^int sprintf(char *buf, const char *fmt, ...)$/;"	f
start	compressed/aslr.c	/^	unsigned long start;$/;"	m	struct:mem_vector	file:
start2	header.S	/^start2:$/;"	l
start_of_setup	header.S	/^start_of_setup:$/;"	l
start_sys_seg	header.S	/^start_sys_seg:	.word	SYSSEG		# obsolete and meaningless, but just$/;"	l
startup_64	tools/build.c	/^unsigned long startup_64;$/;"	v
store_cursor_position	video.c	/^static void store_cursor_position(void)$/;"	f	file:
store_mode_params	video.c	/^static void store_mode_params(void)$/;"	f	file:
store_video_mode	video.c	/^static void store_video_mode(void)$/;"	f	file:
strcmp	string.c	/^int strcmp(const char *str1, const char *str2)$/;"	f
strlen	string.c	/^size_t strlen(const char *s)$/;"	f
strncmp	string.c	/^int strncmp(const char *cs, const char *ct, size_t count)$/;"	f
strnlen	string.c	/^size_t strnlen(const char *s, size_t maxlen)$/;"	f
strstr	string.c	/^char *strstr(const char *s1, const char *s2)$/;"	f
subdir-	Makefile	/^subdir-		:= compressed$/;"	m
sys_table	compressed/eboot.c	/^static efi_system_table_t *sys_table;$/;"	v	file:
syssize	header.S	/^syssize:	.long 0			\/* Filled in by build.c *\/$/;"	l
table	compressed/eboot.h	/^	u64 table;$/;"	m	struct:efi_config
targets	Makefile	/^targets		:= vmlinux.bin setup.bin setup.elf bzImage$/;"	m
targets	compressed/Makefile	/^targets := vmlinux vmlinux.bin vmlinux.bin.gz vmlinux.bin.bz2 vmlinux.bin.lzma \\$/;"	m
test_bit	bitops.h	33;"	d
text_output	compressed/eboot.h	/^	u64 text_output;$/;"	m	struct:efi_config
total_memory	vesa.h	/^	u16 total_memory;	\/* 18 *\/$/;"	m	struct:vesa_general_info
tst_idx	video.h	/^static inline u8 tst_idx(u8 v, u16 port, u8 index)$/;"	f
type_of_loader	header.S	/^type_of_loader:	.byte	0		# 0 means ancient bootloader, newer$/;"	l
u16	tools/build.c	/^typedef unsigned short u16;$/;"	t	file:
u32	tools/build.c	/^typedef unsigned int   u32;$/;"	t	file:
u8	tools/build.c	/^typedef unsigned char  u8;$/;"	t	file:
unsafe	video.h	/^	int unsafe;		\/* Probing is unsafe, only do after "scan" *\/$/;"	m	struct:card_info
update_pecoff_bss	tools/build.c	/^static inline void update_pecoff_bss(unsigned int file_sz,$/;"	f	file:
update_pecoff_bss	tools/build.c	/^static void update_pecoff_bss(unsigned int file_sz, unsigned int init_sz)$/;"	f	file:
update_pecoff_section_header	tools/build.c	/^static void update_pecoff_section_header(char *section_name, u32 offset, u32 size)$/;"	f	file:
update_pecoff_section_header_fields	tools/build.c	/^static void update_pecoff_section_header_fields(char *section_name, u32 vma, u32 size, u32 datasz, u32 offset)$/;"	f	file:
update_pecoff_setup_and_reloc	tools/build.c	/^static inline void update_pecoff_setup_and_reloc(unsigned int size) {}$/;"	f	file:
update_pecoff_setup_and_reloc	tools/build.c	/^static void update_pecoff_setup_and_reloc(unsigned int size)$/;"	f	file:
update_pecoff_text	tools/build.c	/^static inline void update_pecoff_text(unsigned int text_start,$/;"	f	file:
update_pecoff_text	tools/build.c	/^static void update_pecoff_text(unsigned int text_start, unsigned int file_sz)$/;"	f	file:
usage	tools/build.c	/^static void usage(void)$/;"	f	file:
v_res	vesa.h	/^	u16 v_res;		\/* 20 *\/$/;"	m	struct:vesa_mode_info
validate_cpu	cpu.c	/^int validate_cpu(void)$/;"	f
variable_test_bit	bitops.h	/^static inline int variable_test_bit(int nr, const void *addr)$/;"	f
vendor_string	vesa.h	/^	far_ptr vendor_string;	\/* 6 *\/$/;"	m	struct:vesa_general_info
verify	install.sh	/^verify () {$/;"	f
version	compressed/eboot.h	/^	u32 version;$/;"	m	struct:efi_graphics_output_mode_info
version	vesa.h	/^	u16 version;		\/* 4 *\/$/;"	m	struct:vesa_general_info
vertical_resolution	compressed/eboot.h	/^	u32 vertical_resolution;$/;"	m	struct:efi_graphics_output_mode_info
vesa_dac_set_8bits	video-vesa.c	/^static void vesa_dac_set_8bits(void)$/;"	f	file:
vesa_general_info	vesa.h	/^struct vesa_general_info {$/;"	s
vesa_mode_info	vesa.h	/^struct vesa_mode_info {$/;"	s
vesa_probe	video-vesa.c	/^static int vesa_probe(void)$/;"	f	file:
vesa_set_mode	video-vesa.c	/^static int vesa_set_mode(struct mode_info *mode)$/;"	f	file:
vesa_store_edid	video-vesa.c	/^void vesa_store_edid(void)$/;"	f
vesa_store_mode_params_graphics	video-vesa.c	/^static inline void vesa_store_mode_params_graphics(void) {}$/;"	f	file:
vesa_store_mode_params_graphics	video-vesa.c	/^static void vesa_store_mode_params_graphics(void)$/;"	f	file:
vesa_store_pm_info	video-vesa.c	/^static void vesa_store_pm_info(void)$/;"	f	file:
vga_crtc	video-vga.c	/^u16 vga_crtc(void)$/;"	f
vga_modes	video-vga.c	/^static struct mode_info vga_modes[] = {$/;"	v	typeref:struct:mode_info	file:
vga_probe	video-vga.c	/^static int vga_probe(void)$/;"	f	file:
vga_recalc_vertical	video-mode.c	/^static void vga_recalc_vertical(void)$/;"	f	file:
vga_set_14font	video-vga.c	/^static void vga_set_14font(void)$/;"	f	file:
vga_set_480_scanlines	video-vga.c	/^static void vga_set_480_scanlines(void)$/;"	f	file:
vga_set_80x30	video-vga.c	/^static void vga_set_80x30(void)$/;"	f	file:
vga_set_80x34	video-vga.c	/^static void vga_set_80x34(void)$/;"	f	file:
vga_set_80x43	video-vga.c	/^static void vga_set_80x43(void)$/;"	f	file:
vga_set_80x60	video-vga.c	/^static void vga_set_80x60(void)$/;"	f	file:
vga_set_8font	video-vga.c	/^static void vga_set_8font(void)$/;"	f	file:
vga_set_basic_mode	video-vga.c	/^static u8 vga_set_basic_mode(void)$/;"	f	file:
vga_set_mode	video-vga.c	/^static int vga_set_mode(struct mode_info *mode)$/;"	f	file:
vga_set_vertical_end	video-vga.c	/^static void vga_set_vertical_end(int lines)$/;"	f	file:
vginfo	video-vesa.c	/^static struct vesa_general_info vginfo;$/;"	v	typeref:struct:vesa_general_info	file:
vid_mode	header.S	/^vid_mode:	.word SVGA_MODE$/;"	l
video_bios	video-bios.c	/^static __videocard video_bios =$/;"	v	file:
video_bios	video-bios.c	/^static __videocard video_bios;$/;"	v	file:
video_mode_ptr	vesa.h	/^	far_ptr video_mode_ptr;	\/* 14 *\/$/;"	m	struct:vesa_general_info
video_segment	video-mode.c	/^u16 video_segment;$/;"	v
video_vesa	video-vesa.c	/^static __videocard video_vesa =$/;"	v	file:
video_vesa	video-vesa.c	/^static __videocard video_vesa;$/;"	v	file:
video_vga	video-vga.c	/^static __videocard video_vga = {$/;"	v	file:
video_vga	video-vga.c	/^static __videocard video_vga;$/;"	v	file:
vidmem	compressed/misc.c	/^static char *vidmem;$/;"	v	file:
vidport	compressed/misc.c	/^static int vidport;$/;"	v	file:
vminfo	video-vesa.c	/^static struct vesa_mode_info vminfo;$/;"	v	typeref:struct:vesa_mode_info	file:
vmlinux-objs-y	compressed/Makefile	/^vmlinux-objs-y := $(obj)\/vmlinux.lds $(obj)\/head_$(BITS).o $(obj)\/misc.o \\$/;"	m
vmlinux.bin.all-y	compressed/Makefile	/^vmlinux.bin.all-y := $(obj)\/vmlinux.bin$/;"	m
vsprintf	printf.c	/^int vsprintf(char *buf, const char *fmt, va_list args)$/;"	f
win_attr	vesa.h	/^	u8 win_attr[2];		\/* 2 *\/$/;"	m	struct:vesa_mode_info
win_grain	vesa.h	/^	u16 win_grain;		\/* 4 *\/$/;"	m	struct:vesa_mode_info
win_scheme	vesa.h	/^	far_ptr win_scheme;	\/* 12 *\/$/;"	m	struct:vesa_mode_info
win_seg	vesa.h	/^	u16 win_seg[2];		\/* 8 *\/$/;"	m	struct:vesa_mode_info
win_size	vesa.h	/^	u16 win_size;		\/* 6 *\/$/;"	m	struct:vesa_mode_info
wrfs16	boot.h	/^static inline void wrfs16(u16 v, addr_t addr)$/;"	f
wrfs32	boot.h	/^static inline void wrfs32(u32 v, addr_t addr)$/;"	f
wrfs8	boot.h	/^static inline void wrfs8(u8 v, addr_t addr)$/;"	f
wrgs16	boot.h	/^static inline void wrgs16(u16 v, addr_t addr)$/;"	f
wrgs32	boot.h	/^static inline void wrgs32(u32 v, addr_t addr)$/;"	f
wrgs8	boot.h	/^static inline void wrgs8(u8 v, addr_t addr)$/;"	f
x	video.c	/^	int x, y;$/;"	m	struct:saved_screen	file:
x	video.h	/^	u16 x, y;		\/* Width, height *\/$/;"	m	struct:mode_info
xloadflags	header.S	/^xloadflags:$/;"	l
xmode_first	video.h	/^	u16 xmode_first;	\/* Unprobed modes to try to call anyway *\/$/;"	m	struct:card_info
xmode_n	video.h	/^	u16 xmode_n;		\/* Size of unprobed mode range *\/$/;"	m	struct:card_info
y	video.c	/^	int x, y;$/;"	m	struct:saved_screen	file:
y	video.h	/^	u16 x, y;		\/* Width, height *\/$/;"	m	struct:mode_info
